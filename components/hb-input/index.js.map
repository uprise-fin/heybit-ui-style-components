{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/components/hb-input/index.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,IAAI,MAAM,SAAS,CAAC;AAC3B,OAAO,EAAC,IAAI,EAAC,MAAM,KAAK,CAAC;AACzB,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAC1D,OAAO,KAAK,MAAM,oCAAoC,CAAC;AACvD;;;;;;;;;;;GAWG;AAGH,IAAa,OAAO,GAApB,MAAa,OAAQ,SAAQ,IAAI;IAC/B,MAAM,KAAc,MAAM;QACxB,OAAO,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;IAMQ,MAAM;QACb,OAAO,IAAI,CAAA;;;;;;iBAME,IAAI,CAAC,KAAK;;;;;KAKtB,CAAC;IACJ,CAAC;IACQ,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,GAAG,EAAE;;YAClB,IAAI,CAAC,IAAI,CAAC,OAAO;gBACf,IAAI,CAAC,OAAO,GAAG,MAAA,IAAI,CAAC,UAAU,0CAAE,cAAc,CAC5C,OAAO,CACY,CAAC;YACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;QAClC,CAAC,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,CAAC,GAAU,EAAE,EAAE;YAC3B,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,OAAO,CAAC,KAAK;gBACnC,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC;IACJ,CAAC;CACF,CAAA;AAhCC;IADC,QAAQ,EAAE;sCACI;AANJ,OAAO;IADnB,aAAa,CAAC,UAAU,CAAC;GACb,OAAO,CAsCnB;SAtCY,OAAO;AA8CpB,kDAAkD;AAClD,2BAA2B;AAC3B,8BAA8B;AAC9B,2BAA2B;AAC3B,YAAY;AACZ,oCAAoC;AACpC,6CAA6C;AAC7C,iDAAiD;AACjD,uBAAuB;AACvB,wBAAwB;AACxB,mBAAmB;AACnB,UAAU;AACV,oCAAoC;AACpC,qCAAqC;AACrC,2CAA2C;AAC3C,+CAA+C;AAC/C,aAAa;AACb,oDAAoD;AACpD,qDAAqD;AACrD,4DAA4D;AAC5D,aAAa;AACb,UAAU;AACV,0BAA0B;AAC1B,8EAA8E;AAC9E,UAAU;AACV,QAAQ;AACR,OAAO","sourcesContent":["import Base from '../base';\nimport {html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport style from '../../styles/form/input/index.scss';\n/**\n * An example element.\n *\n * @fires input 입력할때\n * @fires change 값이 변경될때 발생\n * @property value 기본 값\n * @slot slot--left - optional, 왼쪽 영역(아이콘)\n * @slot slot--right - optional, 오른쪽 영역(버튼)\n * @csspart slot--left\n * @csspart border\n * @csspart slot--right\n */\n\n@customElement('hb-input')\nexport class HbInput extends Base {\n  static override get styles() {\n    return [style];\n  }\n\n  @property()\n  value!: string;\n  inputEl!: HTMLInputElement;\n\n  override render() {\n    return html`\n      <slot name=\"left-slot\" part=\"slot--left\" class=\"hb-input__slot\"></slot>\n      <input\n        id=\"input\"\n        class=\"hb-input__el\"\n        part=\"el\"\n        value=\"${this.value}\"\n        type=\"text\"\n      />\n      <i class=\"hb-input__border\" part=\"border\"></i>\n      <slot name=\"right-slot\" part=\"slot--right\" class=\"hb-input__slot\"></slot>\n    `;\n  }\n  override connectedCallback() {\n    super.connectedCallback();\n\n    this.onfocus = () => {\n      if (!this.inputEl)\n        this.inputEl = this.shadowRoot?.getElementById(\n          'input'\n        ) as HTMLInputElement;\n      this.value = this.inputEl.value;\n    };\n    this.onblur = (evt: Event) => {\n      if (this.value !== this.inputEl.value)\n        this.dispatchEvent(new Event('change', evt));\n    };\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-input': HbInput;\n  }\n}\n\n// import CustomElement from \"../custom-elements\";\n// const NAME = \"hb-input\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       value: string;\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isInputEl.onfocus = () => {\n//           this.value = this.isInputEl.value;\n//         };\n//         this.isInputEl.onblur = (evt: Event) => {\n//           if (this.value !== this.isInputEl.value)\n//             this.dispatchEvent(new Event(\"change\", evt));\n//         };\n//       }\n//       get isInputEl() {\n//         return this.shadowRoot.getElementById(\"input\") as HTMLInputElement;\n//       }\n//     }\n//   );\n"]}