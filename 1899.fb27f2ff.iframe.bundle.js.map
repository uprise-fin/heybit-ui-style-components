{"version":3,"file":"1899.fb27f2ff.iframe.bundle.js","mappings":";;;;;;;;;;;AAoCA;;ACgEA;;;;;;;;;;;;AAmBA;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;ACqDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;AAMA;AACA;;AAEA;AAEA;;;;;AAMA;;AAEA;;AAIA","sources":["webpack://heybit-ui-styled-components/./src/components/atom/spinner/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/button/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/input/index.ts"],"sourcesContent":["import { Size } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n *\n */\n\n@customElement('hb-spinner')\nexport class HbSpinner extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  size: Size;\n\n  static get properties() {\n    return {\n      size: { type: String, reflect: true }\n    };\n  }\n\n  render() {\n    return html`\n      <svg class=\"hb-spinner__svg\" viewBox=\"0 0 50 50\">\n        <circle\n          class=\"hb-spinner__svg__circle\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          stroke-width=\"5\"\n        ></circle>\n      </svg>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-spinner': HbSpinner;\n  }\n}\n","import type { Size } from '@/components/atom/variable/type';\nimport type {\n  HbButtonNativeType,\n  HbButtonTheme,\n  HbButtonType\n} from '@/components/molecule/button/type';\nimport { wait } from '@/utils';\nimport { type TemplateResult, html, nothing } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { html as staticHtml, literal } from 'lit/static-html.js';\nimport '@/components/atom/icon';\nimport '@/components/atom/spinner';\nimport '@/components/atom/transition';\nimport '@/components/molecule/input';\nimport { Base } from '@/components/base';\n\n/**\n * @fires event 클릭할때\n * @property theme\n * @property size\n * @property type\n * @property loading\n * @property disabled\n * @slot slot--left - optional, slot--left부분을 커스텀할때 사용\n * @slot slot--right - optional, slot--right부분을 커스텀할때 사용\n * @slot 내용 컨텐츠 영역\n * @csspart label\n * @csspart list\n */\n\n@customElement('hb-button')\nexport class HbButton extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  label = '';\n\n  type: HbButtonType;\n\n  size: Size;\n\n  baseLoadingDuration = 0;\n\n  theme: HbButtonTheme;\n\n  plain: boolean = false;\n\n  loading: boolean = false;\n\n  disabled: boolean = false;\n\n  href: string;\n\n  target: React.HTMLAttributeAnchorTarget = '';\n\n  rel: string;\n\n  'native-type': HbButtonNativeType | undefined;\n\n  static get properties() {\n    return {\n      theme: { type: String, reflect: true },\n      size: { type: String, reflect: true },\n      type: { type: String, reflect: true },\n      loading: { type: Boolean, reflect: true },\n      plain: { type: Boolean, reflect: true },\n      baseLoadingDuration: { type: Number, reflect: true },\n      disabled: { type: Boolean, reflect: true },\n      href: { type: String, reflect: true },\n      target: { type: String, reflect: true },\n      rel: { type: String, reflect: true },\n      'native-type': { type: String, reflect: true }\n    };\n  }\n\n  static formAssociated = true;\n\n  private readonly internals = (this as HTMLElement).attachInternals();\n\n  async _handleClick() {\n    if (this.href) return;\n\n    const {\n      internals: { form }\n    } = this;\n\n    if (this.loading || this.disabled) return;\n    if (this.baseLoadingDuration) {\n      this.loading = true;\n      await wait(this.baseLoadingDuration);\n      this.loading = false;\n    }\n\n    if (form && (!this['native-type'] || this['native-type'] === 'submit'))\n      return form.requestSubmit();\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  render(): TemplateResult {\n    const template = {\n      loading: html`<hb-transition class=\"hb-button__loading\" type=\"fade\" ?show=${this.loading}>\n        <hb-spinner size=\"small\"></hb-spinner>\n      </hb-transition>`,\n      default: html`<slot\n          name=\"slot--left\"\n          part=\"slot--left\"\n          class=\"hb-button__slot hb-button__slot--left\"\n        ></slot>\n        <div class=\"hb-button__label\" id=\"label\" part=\"label\">\n          <slot></slot>\n        </div>\n        <slot\n          name=\"slot--right\"\n          part=\"slot--right\"\n          class=\"hb-button__slot hb-button__slot--right\"\n        ></slot>`\n    };\n\n    const isDisabled = this.disabled && !this.href;\n\n    const button = this.href ? literal`a` : literal`button`;\n\n    return staticHtml`<${button}\n          class=\"hb-button__container\"\n          part=\"container\"\n          .href=\"${this.href}\"\n          .target=\"${this.target || nothing}\"\n          .rel=\"${this.rel || this.target === '_blank' ? 'noreferrer noopener' : ''}\"\n          ?disabled=${isDisabled}\n          @click=\"${this._handleClick}\"\n        >\n          ${this.loading ? template.loading : template.default}\n        </${button}>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-button': HbButton;\n  }\n}\n","import { componentVariables } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { colorPalette } from '@/index';\nimport { getElement } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { HbInputType } from './type';\nimport '@/components/molecule/button';\nimport { HbButtonProps } from '@/index';\n\n/**\n * An example element.\n *\n * @fires event 값이 변경될때 발생\n * @property value 기본 값\n * @property attributeSync true 시 value값이 arrtibute 싱크됨\n * @property placeholder\n * @property decimal 소수점\n * @property comma 콤마\n * @property maxlength 최대글자수\n * @property type 텍스트 숫자 비번\n * @property error 텍스트 숫자 비번\n * @property readonly 텍스트 숫자 비번\n * @property clearable 텍스트 숫자 비번\n * @property isValidated 텍스트 숫자 비번\n * @slot slot--left - optional, 왼쪽 영역(아이콘)\n * @slot slot--right - optional, 오른쪽 영역(버튼)\n * @csspart slot--left\n * @csspart border\n * @csspart slot--right\n */\n\n@customElement('hb-input')\nexport class HbInput extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  _value: string = '';\n\n  inputEl?: HTMLInputElement;\n\n  attributeSync = false;\n\n  placeholder = '';\n\n  _error = false;\n\n  decimal: number = 2;\n\n  comma: number = 3;\n\n  clearable = false;\n\n  isValidated = false;\n\n  _countdown: number = 60;\n\n  _readonly: boolean = false;\n\n  _disabled: boolean = false;\n\n  maxlength?: number;\n\n  type: HbInputType = 'text';\n\n  nowrap = true;\n\n  static formAssociated = true;\n\n  private readonly internals = (this as HTMLElement).attachInternals();\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = value;\n    if (value) this.setAttribute('data-disabled', '');\n    else this.removeAttribute('data-disabled');\n  }\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = value;\n    if (value) this.setAttribute('data-readonly', '');\n    else this.removeAttribute('data-readonly');\n  }\n\n  get error() {\n    return this._error;\n  }\n\n  set error(value: boolean) {\n    this._error = value;\n    if (value) this.setAttribute('data-error', '');\n    else this.removeAttribute('data-error');\n  }\n\n  static get properties() {\n    return {\n      // _value: { type: String, Reflect: true },\n      value: { type: String, Reflect: true },\n      attributeSync: { type: Boolean, Reflect: true },\n      type: { type: String, Reflect: true },\n      placeholder: { type: String, Reflect: true },\n      maxlength: { type: Number, Reflect: true },\n      comma: { type: Number, Reflect: true },\n      decimal: { type: Number, Reflect: true },\n      error: { type: Boolean, Reflect: true },\n      readonly: { type: Boolean, Reflect: true },\n      _readonly: { type: Boolean, Reflect: true },\n      disabled: { type: Boolean, Reflect: true },\n      _disabled: { type: Boolean, Reflect: true },\n      nowrap: { type: Boolean, Reflect: true },\n      clearable: { type: Boolean, Reflect: true },\n      isValidated: { type: Boolean, Reflect: true }\n    };\n  }\n\n  get pattern() {\n    if (['number', 'currency'].includes(this.type)) return '[0-9]*';\n    return null;\n  }\n\n  get inputmode() {\n    if (['number', 'currency'].includes(this.type)) return 'decimal';\n    return null;\n  }\n\n  get isType() {\n    if (['number', 'currency', 'english'].includes(this.type)) return 'text';\n    return this.type;\n  }\n\n  set value(value: string) {\n    if (this._value !== value && value !== null) {\n      if (!value || value === 'null') value = '';\n      const { inputEl } = this;\n      if (this.nowrap) value = (value || '').replace(/\\n/g, '');\n      if (this.type === 'number') {\n        value = this.toNumber(value);\n      } else if (this.type === 'currency') {\n        value = this.toCurrency(value);\n      } else if (this.type === 'english') {\n        value = this.toEnglish(value);\n      } else {\n        value = value.substring(0, this.isMaxlength);\n      }\n      if (inputEl) {\n        inputEl.value = value;\n        if (value !== this._value) {\n          this._value = value;\n          this.onChange();\n        }\n      } else this._value = value;\n\n      this.onResize();\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get originalValue() {\n    if (this.type === 'currency') return this.toCurrency(this._value, true);\n    return this._value;\n  }\n\n  get isMaxlength() {\n    return this.maxlength || Infinity;\n  }\n\n  /**\n   * @deprecated textArea대신 input을 사용할 수 있게 개선해야함.\n   */\n  render() {\n    return html`\n      <slot name=\"slot--left\" part=\"slot--left\" class=\"hb-input__slot\"></slot>\n      <textarea\n        id=\"input\"\n        rows=\"1\"\n        data-readonly=${this.readonly}\n        data-disabled=${this.disabled}\n        class=\"hb-input__el\"\n        part=\"input\"\n        pattern=${this.pattern}\n        inputmode=${this.inputmode}\n        @input=${this.onInput}\n        @keydown=${this.onEnter}\n        type=${this.isType}\n        placeholder=${this.placeholder}\n        ?readonly=${this._readonly}\n        ?disabled=${this._disabled}\n      ></textarea>\n      <i class=\"hb-input__border\" part=\"border\"></i>\n      <slot name=\"slot--right\" part=\"slot--right\" class=\"hb-input__slot\">\n        ${this.clearable\n          ? html`\n              <hb-icon\n                class=\"hb-input__clear\"\n                size=\"medium\"\n                icon=\"system/filled/clear\"\n                style=\"--husc__icon__color: ${colorPalette.black[300]}; cursor: pointer;\"\n                @click=${() => (this.value = '')}\n              ></hb-icon>\n            `\n          : ''}\n        ${this.isValidated\n          ? html`\n              <hb-icon\n                class=\"hb-input__validated\"\n                size=\"medium\"\n                icon=\"system/filled/checkbox-able\"\n                style=\"--husc__icon__color: ${colorPalette.green[300]};\"\n              ></hb-icon>\n            `\n          : ''}\n      </slot>\n    `;\n  }\n\n  onResize() {\n    const inputEl = this.inputEl;\n    if (inputEl) {\n      const { minHeight, maxHeight, padding, border } = componentVariables.input;\n      const currentContentHeight = minHeight - padding.bottom - padding.top - border.width * 2;\n      inputEl.style.height = 'auto';\n      const { scrollHeight } = inputEl;\n      const targetCurrentHeight = Math.min(\n        scrollHeight,\n        maxHeight - padding.bottom - padding.top - border.width * 2\n      );\n      if (targetCurrentHeight >= currentContentHeight)\n        inputEl.style.height = targetCurrentHeight + 'px';\n    }\n  }\n\n  readonly ableNumber = /([0-9])/;\n\n  readonly ableCurrency = /([.|0-9])/;\n\n  readonly ableEnglish = /[a-z]/i;\n\n  onEnter(ev: KeyboardEvent) {\n    if (ev.key !== 'Enter') return;\n\n    if (!this.internals.form) {\n      ev.preventDefault();\n      return this.onSubmit(new CustomEvent('submit'));\n    }\n\n    const isReadySubmit = [...this.internals.form].some((el) => {\n      const hbButtonEl: HbButtonProps & Element = el;\n      return (\n        hbButtonEl.nodeName === 'HB-BUTTON' &&\n        !hbButtonEl.href &&\n        (!hbButtonEl['native-type'] || hbButtonEl['native-type'] === 'submit') &&\n        !hbButtonEl.disabled\n      );\n    });\n\n    if (!isReadySubmit) return;\n    this.internals.setFormValue(this._value);\n    this.internals.form.requestSubmit();\n  }\n\n  onInput() {\n    const inputEl = this.inputEl;\n    const { value } = inputEl;\n    this.value = value;\n  }\n\n  toEnglish(value: string) {\n    return value.replace(/([^a-z])/gi, '').substring(0, this.isMaxlength);\n  }\n\n  toCurrency(value: string, toNumber: boolean = false) {\n    if (!value || typeof value !== 'string') return '';\n    let dotIndex = value.indexOf('.');\n    if (dotIndex === 0) {\n      dotIndex = 1;\n      value = `0.${value}`;\n    }\n    const hasDot = dotIndex > 0;\n    let decimal = '';\n    if (hasDot) {\n      decimal = value.substring(dotIndex + 1, dotIndex + 1 + this.decimal);\n      value = value.substring(0, dotIndex);\n    }\n    value = value.replace(/^^0[{1-9}]/gi, '{1}'); // 최초 0뒤에 오는 숫자 => 앞 0 제거\n    value = value.replace(/^0{2,}/gi, '0'); // 최초 0 2개이상 0으로 변경\n    value = value.replace(/[^0-9]/gi, '').substring(0, this.isMaxlength); // 숫자 말고 전부 제거\n\n    if (!toNumber) {\n      const req = new RegExp(`\\\\B(?=(\\\\d{${this.comma}})+(?!\\\\d))`, 'g');\n      value = value.replace(req, ',');\n    }\n    return value + `${hasDot ? '.' : ''}${decimal.replace(/[^0-9]/gi, '')}`;\n  }\n\n  toNumber(value: string) {\n    if (!value || typeof value !== 'string') return '';\n\n    return value.replace(/[^0-9]/gi, '').substring(0, this.isMaxlength); // 숫자 말고 전부 제거\n  }\n\n  onChange() {\n    if (!this.inputEl) return;\n    this.onEvent(new CustomEvent('event'));\n    if (this.maxlength && this.originalValue.length === this.maxlength)\n      this.onSubmit(new CustomEvent('submit'));\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    const inputEl = await getElement<HTMLInputElement>(this.shadowRoot, 'input');\n    this.tabIndex = 0;\n    this.inputEl = inputEl;\n    this.value = this.getAttribute('value');\n    inputEl.value = this.value;\n    this.onResize();\n    this.onclick = () => inputEl.focus();\n    this.addEventListener('focus', () => {\n      this.setAttribute('data-focus', '');\n      this.inputEl.focus();\n    });\n    this.addEventListener('blur', () => this.removeAttribute('data-focus'));\n  }\n\n  disconnectedCallback() {\n    this.onclick = () => null;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-input': HbInput;\n  }\n}\n\n// const NAME = \"hb-input\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       value: string;\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isInputEl.onfocus = () => {\n//           this.value = this.isInputEl.value;\n//         };\n//         this.isInputEl.onblur = (evt: Event) => {\n//           if (this.value !== this.isInputEl.value)\n//             this.dispatchEvent(new CustomEvent(\"change\", evt));\n//         };\n//       }\n//       get isInputEl() {\n//         return this.shadowRoot.getElementById(\"input\") as HTMLInputElement;\n//       }\n//     }\n//   );\n"],"names":[],"sourceRoot":""}