{"version":3,"file":"components-molecule-modal-page-dialog-index-stories.58f3f582.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AA8CA;;;;AAOA;;;;ACyCA;AACA;;;AAGA;AAGA;AACA;AACA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAIA;AC9BA;AACA;;AAEA;AACA;AACA;;;;AAIA;;;AAGA;;;;;;;AAQA;;ACtBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;AAaA","sources":["webpack://heybit-ui-styled-components/./src/components/atom/loading/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/img/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/modal/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/modal/page-dialog/index.ts"],"sourcesContent":["import { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('hb-loading')\nexport class HbLoading extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  loaded = false;\n\n  delete = false;\n\n  duration: number;\n\n  background: string;\n\n  backgroundAccent: string;\n\n  static get properties() {\n    return {\n      loaded: { type: Boolean, Reflect: true },\n      duration: { type: Number, Reflect: true },\n      background: { type: String, Reflect: true },\n      backgroundAccent: { type: String, Reflect: true },\n      width: { type: String, Reflect: true },\n      height: { type: String, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    this.ontransitionend = () => (this.delete ? this.remove() : this.setAttribute('done', ''));\n  }\n\n  // render() {\n  //   return Array(this.length).fill(null).map((_,i) => html`\n  //     <div class=\"hb-loading__wall\" part=${`cell-${i+1}`}></div>\n  //   `)\n\n  // }\n\n  render() {\n    return html`\n      <div\n        style=${`--duration:${this.duration || 2000}ms;--background:${\n          this.background || 'var(--husc__black--200)'\n        }; --background--accent:${this.backgroundAccent || 'var(--husc__white--50)'}`}\n        class=\"hb-loading__wall\"\n        part=\"wall\"\n      ></div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-loading': HbLoading;\n  }\n}\n","import '@/components/atom/loading';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @property src\n * @property multiSource\n * @property breakPoint\n * @property pcPrefix\n * @csspart picture\n * @csspart skeleton\n * @csspart img\n */\n\n@customElement('hb-img')\nexport class HbImg extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  src: string;\n\n  alt: string;\n\n  loadingWidth: number;\n\n  loadingHeight: number;\n\n  breakPoint = 0;\n\n  multiSource = 0;\n\n  pcPrefix = '-pc';\n\n  loaded = false;\n\n  error = false;\n\n  static get properties() {\n    return {\n      src: { type: String, reflect: true },\n      alt: { type: String, reflect: true },\n      loadingWidth: { type: Number, reflect: true },\n      loadingHeight: { type: Number, reflect: true },\n      multiSource: { type: Number, reflect: true },\n      breakPoint: { type: Number, reflect: true },\n      pcPrefix: { type: String, reflect: true },\n      loaded: { type: Boolean, reflect: true },\n      error: { type: Boolean, reflect: true }\n    };\n  }\n\n  get srcExt() {\n    const number = this.src.lastIndexOf('.');\n    return this.src.substring(number);\n  }\n\n  get srcName() {\n    const number = this.src.lastIndexOf('.');\n    return this.src.substring(0, number);\n  }\n\n  get set() {\n    return Array(this.multiSource).fill(null);\n  }\n\n  get srcset() {\n    const arr = this.set.map((_, i) => {\n      const j = i + 1;\n      if (j === 1) {\n        return `${this.srcName}${this.srcExt} 1x`;\n      }\n      return `${this.srcName}@${j}x${this.srcExt} ${j}x`;\n    });\n    return arr.join(',');\n  }\n\n  get pcSrcset() {\n    const arr = this.set.map((_, i) => {\n      const j = i + 1;\n      if (j === 1) {\n        return `${this.srcName}${this.pcPrefix}${this.srcExt} 1x`;\n      }\n      return `${this.srcName}${this.pcPrefix}@${j}x${this.srcExt} ${j}x`;\n    });\n    return arr.join(',');\n  }\n\n  render() {\n    return html`\n      <hb-loading\n        class=\"hb-img__loading\"\n        part=\"loading\"\n        ?loaded=${this.loaded || this.error}\n        style=\"width:${this.loadingWidth}px; height:${this.loadingHeight}px;\"\n      ></hb-loading>\n      <picture class=\"hb-img__picture\" part=\"picture\">\n        ${this.multiSource > 0\n          ? this.breakPoint > 0\n            ? html`\n                <source media=${`(max-width: ${this.breakPoint - 1}px)`} srcset=${this.srcset} />\n                <source media=${`(min-width: ${this.breakPoint}px)`} srcset=${this.pcSrcset} />\n              `\n            : html` <source srcset=${this.srcset} /> `\n          : ''}\n        <img\n          class=\"hb-img__picture__img\"\n          part=\"img\"\n          src=${this.src}\n          alt=${this.alt}\n          @error=${this.onError}\n          @load=${this.onLoad}\n          ?loaded=${this.loaded}\n          ?error=${this.error}\n        />\n      </picture>\n    `;\n  }\n\n  onLoad(event: Event) {\n    this.loaded = true;\n    this.dispatchEvent(new Event('load', event));\n  }\n\n  onError(event: Event) {\n    this.error = true;\n    this.dispatchEvent(new Event('error', event));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-img': HbImg;\n  }\n}\n","import '@/components/molecule/anchor';\nimport '@/components/molecule/button';\nimport '@/components/molecule/img';\nimport { HbTransitionType } from '@/components/atom/transition/type';\nimport { HorizonAlign, VerticalAlign } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { getElement } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires close 닫기\n * @property open 온 오프\n * @property width\n * @property persistent\n * @property hideCloseBtn\n * @property icon\n * @property title\n * @slot container\n * @csspart container\n */\nconst obj = [\n  ['auto', 'auto'],\n  ['0', 'auto'],\n  ['auto', '0']\n];\nconst verObj = {\n  middle: obj[0],\n  top: obj[1],\n  bottom: obj[2]\n};\nconst horObj = {\n  center: obj[0],\n  right: obj[1],\n  left: obj[2]\n};\n@customElement('hb-modal')\nexport class HbModal extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    this.containerEl = await getElement<HTMLDivElement>(this.shadowRoot, 'container');\n    this.containerEl!.onanimationend = (event: AnimationEvent) => this.onAnimationEnd(event);\n  }\n\n  disconnectedCallback() {\n    this.containerEl.onanimationend = () => null;\n  }\n\n  verticalAlign: VerticalAlign = 'middle';\n\n  horizonAlign: HorizonAlign = 'center';\n\n  transitionType: HbTransitionType;\n\n  containerEl?: HTMLDivElement;\n\n  width = '0';\n\n  height = '0px';\n\n  open: boolean;\n\n  persistent = false;\n\n  get position() {\n    return `${verObj[this.verticalAlign][0]} ${horObj[this.horizonAlign][0]} ${\n      verObj[this.verticalAlign][1]\n    } ${horObj[this.horizonAlign][1]}`;\n  }\n\n  static get properties() {\n    return {\n      open: { type: Boolean, reflect: true },\n      persistent: { type: Boolean, reflect: true },\n      width: { type: String, reflect: true },\n      height: { type: String, reflect: true },\n      transitionType: { type: String, reflect: true },\n      verticalAlign: { type: String, reflect: true },\n      horizonAlign: { type: String, reflect: true }\n    };\n  }\n\n  render() {\n    return html`\n      <hb-transition ?show=${this.open} id=\"modal-transition\" type=\"fade\">\n        <div class=\"hb-modal__wrap\" @click=${this.adapterOnClose} part=\"layer\">\n          <hb-transition\n            ?show=${this.open}\n            type=${this.transitionType}\n            style=\"margin: ${this.position};\"\n          >\n            <div\n              class=\"hb-modal__container\"\n              style=${`--husc__modal__width: ${this.width}; min-height: ${this.height}`}\n              id=\"container\"\n              part=\"container\"\n              @click=${this.stopPropagation}\n            >\n              <slot></slot>\n            </div>\n          </hb-transition>\n        </div>\n      </hb-transition>\n    `;\n  }\n\n  onAnimationEnd(event: AnimationEvent) {\n    //TODO 오픈드 이벤트 및 클로즈드 이벤트 생성가능\n    this.classList.remove(event.animationName);\n  }\n\n  adapterOnClose() {\n    if (this.persistent) return this.classList.add('shake');\n\n    this.dispatchEvent(new CustomEvent('close'));\n    // this.onEvent(new CustomEvent('event'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-modal': HbModal;\n  }\n}\n","import '../';\nimport { HbTransitionType } from '@/components/atom/transition/type';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires close 닫기\n * @property open 온 오프\n * @property width\n * @property persistent\n * @property hideCloseBtn\n * @property icon\n * @property title\n * @slot 내용\n * @csspart container\n * @csspart icon\n * @csspart title\n * @csspart content\n * @csspart buttons\n * @csspart anchor\n */\n\n@customElement('hb-page-dialog')\nexport class HbPageDialog extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  loading = false;\n\n  baseLoadingDuration = 500;\n\n  width = '100%';\n\n  open: boolean;\n\n  icon = '';\n\n  title = '';\n\n  persistent = false;\n\n  hideCloseBtn = false;\n\n  transitionType: HbTransitionType = 'zoom';\n\n  disabled: boolean;\n\n  get eventDisabled() {\n    return this.loading;\n  }\n  // get open() {\n  //   return this._open;\n  // }\n  // set open(val: boolean) {\n  //   if (this._open !== val) {\n  //     this._open = val\n  //     this.onToggle(val)\n  //   }\n  // }\n\n  // @property()\n  // value!: string;\n\n  static get properties() {\n    return {\n      open: { type: Boolean, Reflect: true },\n      buttons: { type: Array, Reflect: true },\n      disabled: { type: Boolean, Reflect: true },\n      eventDisabled: { type: Boolean, Reflect: true },\n      persistent: { type: Boolean, Reflect: true },\n      hideCloseBtn: { type: Boolean, Reflect: true },\n      width: { type: String, Reflect: true },\n      loading: { type: Boolean, Reflect: true },\n      baseLoadingDuration: { type: Number, Reflect: true },\n      buttonAlign: { type: String, Reflect: true },\n      title: { type: String, Reflect: true },\n      icon: { type: String, Reflect: true },\n      transitionType: { type: String, Reflect: true }\n    };\n  }\n\n  render() {\n    return html`\n      <hb-modal\n        @close=${this.onClose}\n        width=${this.width}\n        ?open=${this.open}\n        ?persistent=${this.persistent || this.eventDisabled}\n        transitionType=${this.transitionType}\n      >\n        <div class=\"hb-page-dialog__container ${this.transitionType}\" part=\"container\">\n          ${this.hideCloseBtn\n            ? ''\n            : html` <hb-button\n                ?disabled=${this.eventDisabled}\n                @event=${this.onClose}\n                class=\"hb-page-dialog__close-btn\"\n                part=\"close-btn\"\n                id=\"close-btn\"\n                color=\"#1F2123\"\n                ><hb-icon icon=\"system/outline/close\" size=\"small\"></hb-icon\n              ></hb-button>`}\n          <div class=\"hb-page-dialog__body\">\n            <slot class=\"hb-page-dialog__body__content\"></slot>\n          </div>\n        </div>\n      </hb-modal>\n    `;\n  }\n\n  onClose() {\n    this.open = false;\n    this.removeAttribute('open');\n    // this.dispatchEvent(new CustomEvent('close'));\n    this.onEvent(new CustomEvent('event'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-page-dialog': HbPageDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}