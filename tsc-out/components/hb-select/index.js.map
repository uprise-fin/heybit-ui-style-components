{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/components/hb-select/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Base from '../../utils/base';\nimport {html} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\nimport {getChildren} from '../../utils';\nimport style from '../../styles/form/select/index.scss';\n/**\n * An example element.\n *\n * @fires select 옵션을 선택할때 발생\n * @fires change 값이 변경될때 발생\n * @property value 기본 값\n * @slot option - required, select의 옵션 엘리먼트\n * @slot label - optional, label부분을 커스텀할때 사용\n * @csspart label\n * @csspart list\n */\n\n@customElement('hb-select')\nexport class HbSelect extends Base {\n  static override get styles() {\n    return [style];\n  }\n\n  @property()\n  width!: string;\n  @property()\n  value!: string;\n\n  sto = setTimeout(() => {}, 0);\n  optionEls!: HTMLElement[];\n  labelEl!: HTMLElement;\n\n  override render() {\n    return html`\n      <slot\n        id=\"label\"\n        part=\"label\"\n        name=\"label\"\n        class=\"hb-select__label hb-select__option\"\n      ></slot>\n      <slot\n        class=\"hb-select__list\"\n        @click=\"${this.onSelect}\"\n        style=\"width: ${this.width}px;\"\n        part=\"list\"\n        id=\"list\"\n        name=\"option\"\n      ></slot>\n    `;\n  }\n  override connectedCallback() {\n    super.connectedCallback();\n    this.tabIndex = 0;\n    this.onfocus = () => this.onShow();\n    this.onblur = () => this.onHide();\n    this.bindEvents();\n  }\n  async bindEvents() {\n    const children = await getChildren(this.children);\n    let label;\n    this.labelEl =\n      children.filter((x) => x.slot === 'label')[0] ||\n      this.shadowRoot?.getElementById('label');\n    this.optionEls = children.filter((x) => x.slot === 'option');\n    this.optionEls.forEach((element: HTMLElement) => {\n      element.onkeyup = (evt: KeyboardEvent) => {\n        if (evt.key === 'Enter') {\n          this.onSelect(evt);\n          this.onHide();\n        }\n      };\n      element.onclick = (evt: MouseEvent) => {\n        this.onSelect(evt);\n        this.onHide();\n      };\n      element.onfocus = () => {\n        clearTimeout(this.sto);\n        this.onShow();\n      };\n      element.onblur = () => {\n        this.onHide();\n      };\n\n      if (element.dataset.value === this.value) {\n        label = element.dataset.label;\n        element.classList.add('selected');\n      }\n    });\n    this.labelEl.dataset.value = this.value;\n    this.labelEl.dataset.label = label;\n  }\n\n  onSelect(evt: Event) {\n    const element = evt.target as HTMLElement;\n    const {value, label} = element.dataset;\n    if (this.value === value) return;\n\n    this.optionEls.forEach((x) => {\n      if (x === element) return element.classList.add('selected');\n      x.classList.remove('selected');\n    });\n\n    this.dispatchEvent(new Event('change', evt));\n    this.value = value!;\n    this.labelEl.dataset.value = value;\n    this.labelEl.dataset.label = label;\n  }\n  onShow() {\n    clearTimeout(this.sto);\n    const {width} = this.getBoundingClientRect();\n    this.classList.add('open');\n    this.width = `${width}`;\n    // this.top = `${top}`;\n  }\n\n  onHide() {\n    this.sto = setTimeout(() => {\n      this.classList.remove('open');\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-select': HbSelect;\n  }\n}\n"]}