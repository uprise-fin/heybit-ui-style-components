{"version":3,"file":"components-molecule-toast-index-stories.539560a0.iframe.bundle.js","mappings":";;;;;;AA2GA;AACA;;AAGA;AAYA;;;AAGA;AACA;;AAEA;AACA;;;AAKA","sources":["webpack://heybit-ui-styled-components/./src/components/molecule/toast/index.ts"],"sourcesContent":["import '@/components/molecule/button';\nimport { Base } from '@/components/base';\nimport { componentVariables, HbIconName } from '@/index';\nimport { getElement } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { HbToastMessage, hbToastTheme, HbToastTheme } from './type';\n\n/**\n * @property open 온 오프\n * @slot header - optional, 헤더\n * @slot content - optional, 내용\n * @slot footer - optional, 푸터\n * @csspart container\n * @csspart header\n * @csspart content\n * @csspart footer\n */\ninterface Timer {\n  time: number;\n  index: number;\n}\n@customElement('hb-toast')\nexport class HbToast extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  now: number = 0;\n\n  messages?: HbToastMessage[];\n\n  timer: Timer[] = [];\n\n  duration: number = 3000;\n\n  hide = false;\n\n  static get properties() {\n    return {\n      messages: { type: Array, Reflect: true },\n      duration: { type: Number, Reflect: true },\n      now: { type: Number, Reflect: true },\n      hide: { type: Boolean, Reflect: true },\n      timer: { type: Array, Reflect: true }\n    };\n  }\n\n  get messagesTrigger() {\n    if (!this.messages?.length) {\n      this.timer = [];\n      return [];\n    }\n    while (this.messages.length > this.timer.length) {\n      const index = this.timer.length;\n      const duration = (this.messages[index].duration || this.duration) - 1;\n      const date = new Date().getTime() + duration;\n      this.timer.push({ time: date, index });\n      setTimeout(() => (this.now = date), duration);\n      // this.getHeight(index);\n    }\n    return this.messages;\n  }\n\n  async getHeight(index: number) {\n    if (index === this.messages.length - 1) {\n      const element = await getElement(this.shadowRoot, `toast-${index}`);\n      const height = element.scrollHeight;\n\n      [element].map((x) =>\n        x.style.setProperty('--transition__height--bottom-up-height', `${height}px`)\n      );\n\n      // element.setAttribute(\n      //   'style',\n      //   `--transition__height--bottom-up-height: ${height}px`,\n      // );\n    }\n  }\n\n  // clean() {\n  //   this.timer = [];\n  //   this.messages = [];\n  // }\n\n  getShow(index: number) {\n    return this.timer[index]?.time > this.now;\n  }\n\n  // getIndex(index: number) {\n  //   return this.timer.filter((x) => x.time > this.now).findIndex(x => x.index === index)\n  // }\n\n  // visibleIcon(msg: string) {\n  //   return msg.match(/\\[!]/)\n  // }\n\n  // messageConverter(msg: string) {\n  //   msg = msg.replace(/\\\\n/g, '\\n')\n  //   return msg.replace(/\\[!]/g, '')\n  // }\n  getIconTemplate(theme?: HbToastTheme) {\n    if (hbToastTheme.includes(theme)) {\n      const icon = componentVariables.toast[theme].icon as HbIconName;\n      const color = componentVariables.toast[theme].color;\n      return html`<hb-icon\n        class=\"hb-toast__content__icon\"\n        style=\"--husc__icon__color: ${color};\"\n        icon=\"${icon}\"\n        size=\"medium\"\n      ></hb-icon>`;\n    }\n  }\n\n  // connectedCallback() {\n  //   super.connectedCallback();\n  //   this.style.setProperty('--transition__delay-start--ms', '30ms');\n  // }\n\n  render() {\n    return this.messagesTrigger.map(\n      (x, i) =>\n        html`<hb-transition\n          id=\"toast-${i}\"\n          class=\"hb-toast__position\"\n          type=\"fade\"\n          ?show=${this.getShow(i)}\n          ><hb-transition type=\"bottom-up\" ?show=${this.getShow(i)}\n            ><div class=\"hb-toast__content\">\n              ${this.getIconTemplate(x.theme)}\n              <div class=\"hb-toast__content__text\">${x.text}</div>\n            </div></hb-transition\n          ></hb-transition\n        >`\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-toast': HbToast;\n  }\n}\n// const NAME = \"hb-toast\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       properties = {\n//         id: {\n//           closeBtn: \"close-btn\",\n//           wrap: \"wrap\",\n//         },\n//       };\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isWrapEl.onanimationstart = () => this.onAnimationStart();\n//         this.isWrapEl.onanimationend = () => this.onAnimationEnd();\n//         this.isCloseBtnEl.onclick = () => this.onHide();\n//       }\n//       get isCloseBtnEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.closeBtn\n//         ) as HTMLButtonElement;\n//       }\n//       get isWrapEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.wrap\n//         ) as HTMLButtonElement;\n//       }\n\n//       onHide() {\n//         this.classList.add(this.isProperties.classList.animation);\n//         super.onHide();\n//       }\n//     }\n//   );\n"],"names":[],"sourceRoot":""}