{"version":3,"file":"utils.js","sourceRoot":"","sources":["src/utils.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,WAAW,CACzB,QAAwB,EACxB,KAAc;IAEd,MAAM,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,GAAG,EAAE,EAAE;QACvC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;YACxC,CAAC,EAAE,EAAE,GAAG,KAAK,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC7B,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,QAAQ,CAAkB,CAAC,CACxD,CAAC;AACJ,CAAC;AACD,MAAM,UAAU,UAAU,CACxB,IAAuB,EACvB,EAAU,EACV,KAAc;IAEd,MAAM,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACtD,MAAM,OAAO,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,cAAc,CAAC,EAAE,CAAM,CAAC;IAC9C,IAAI,CAAC,OAAO,IAAI,KAAK,GAAG,EAAE,EAAE;QAC1B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;YACvC,CAAC,EAAE,GAAG,GAAG,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;AACpD,CAAC","sourcesContent":["export function getChildren(\n  children: HTMLCollection,\n  timer?: number\n): PromiseLike<HTMLElement[]> {\n  const index = typeof timer === \"number\" ? ++timer : 0;\n  if (children.length === 0 && index < 10) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(getChildren(children, index));\n      }, 10 * index);\n    });\n  }\n  return new Promise((resolve) =>\n    resolve(Array.call(null, ...children) as HTMLElement[])\n  );\n}\nexport function getElement<T extends HTMLElement>(\n  root: ShadowRoot | null,\n  id: string,\n  timer?: number\n): PromiseLike<T | null | undefined> {\n  const index = typeof timer === \"number\" ? ++timer : 0;\n  const element = root?.getElementById(id) as T;\n  if (!element && index < 10) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(getElement(root, id, index));\n      }, 100 * index);\n    });\n  }\n  return new Promise((resolve) => resolve(element));\n}\n"]}