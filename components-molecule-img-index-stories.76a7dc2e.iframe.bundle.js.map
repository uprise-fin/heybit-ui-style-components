{"version":3,"file":"components-molecule-img-index-stories.76a7dc2e.iframe.bundle.js","mappings":";;;;;;;;;;;;;AA8CA;;;;AAOA;;;;ACyCA;AACA;;;AAGA;AAGA;AACA;AACA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAIA","sources":["webpack://heybit-ui-styled-components/./src/components/atom/loading/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/img/index.ts"],"sourcesContent":["import { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n@customElement('hb-loading')\nexport class HbLoading extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  loaded = false;\n\n  delete = false;\n\n  duration: number;\n\n  background: string;\n\n  backgroundAccent: string;\n\n  static get properties() {\n    return {\n      loaded: { type: Boolean, Reflect: true },\n      duration: { type: Number, Reflect: true },\n      background: { type: String, Reflect: true },\n      backgroundAccent: { type: String, Reflect: true },\n      width: { type: String, Reflect: true },\n      height: { type: String, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    this.ontransitionend = () => (this.delete ? this.remove() : this.setAttribute('done', ''));\n  }\n\n  // render() {\n  //   return Array(this.length).fill(null).map((_,i) => html`\n  //     <div class=\"hb-loading__wall\" part=${`cell-${i+1}`}></div>\n  //   `)\n\n  // }\n\n  render() {\n    return html`\n      <div\n        style=${`--duration:${this.duration || 2000}ms;--background:${\n          this.background || 'var(--husc__black--200)'\n        }; --background--accent:${this.backgroundAccent || 'var(--husc__white--50)'}`}\n        class=\"hb-loading__wall\"\n        part=\"wall\"\n      ></div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-loading': HbLoading;\n  }\n}\n","import '@/components/atom/loading';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @property src\n * @property multiSource\n * @property breakPoint\n * @property pcPrefix\n * @csspart picture\n * @csspart skeleton\n * @csspart img\n */\n\n@customElement('hb-img')\nexport class HbImg extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  src: string;\n\n  alt: string;\n\n  loadingWidth: number;\n\n  loadingHeight: number;\n\n  breakPoint = 0;\n\n  multiSource = 0;\n\n  pcPrefix = '-pc';\n\n  loaded = false;\n\n  error = false;\n\n  static get properties() {\n    return {\n      src: { type: String, reflect: true },\n      alt: { type: String, reflect: true },\n      loadingWidth: { type: Number, reflect: true },\n      loadingHeight: { type: Number, reflect: true },\n      multiSource: { type: Number, reflect: true },\n      breakPoint: { type: Number, reflect: true },\n      pcPrefix: { type: String, reflect: true },\n      loaded: { type: Boolean, reflect: true },\n      error: { type: Boolean, reflect: true }\n    };\n  }\n\n  get srcExt() {\n    const number = this.src.lastIndexOf('.');\n    return this.src.substring(number);\n  }\n\n  get srcName() {\n    const number = this.src.lastIndexOf('.');\n    return this.src.substring(0, number);\n  }\n\n  get set() {\n    return Array(this.multiSource).fill(null);\n  }\n\n  get srcset() {\n    const arr = this.set.map((_, i) => {\n      const j = i + 1;\n      if (j === 1) {\n        return `${this.srcName}${this.srcExt} 1x`;\n      }\n      return `${this.srcName}@${j}x${this.srcExt} ${j}x`;\n    });\n    return arr.join(',');\n  }\n\n  get pcSrcset() {\n    const arr = this.set.map((_, i) => {\n      const j = i + 1;\n      if (j === 1) {\n        return `${this.srcName}${this.pcPrefix}${this.srcExt} 1x`;\n      }\n      return `${this.srcName}${this.pcPrefix}@${j}x${this.srcExt} ${j}x`;\n    });\n    return arr.join(',');\n  }\n\n  render() {\n    return html`\n      <hb-loading\n        class=\"hb-img__loading\"\n        part=\"loading\"\n        ?loaded=${this.loaded || this.error}\n        style=\"width:${this.loadingWidth}px; height:${this.loadingHeight}px;\"\n      ></hb-loading>\n      <picture class=\"hb-img__picture\" part=\"picture\">\n        ${this.multiSource > 0\n          ? this.breakPoint > 0\n            ? html`\n                <source media=${`(max-width: ${this.breakPoint - 1}px)`} srcset=${this.srcset} />\n                <source media=${`(min-width: ${this.breakPoint}px)`} srcset=${this.pcSrcset} />\n              `\n            : html` <source srcset=${this.srcset} /> `\n          : ''}\n        <img\n          class=\"hb-img__picture__img\"\n          part=\"img\"\n          src=${this.src}\n          alt=${this.alt}\n          @error=${this.onError}\n          @load=${this.onLoad}\n          ?loaded=${this.loaded}\n          ?error=${this.error}\n        />\n      </picture>\n    `;\n  }\n\n  onLoad(event: Event) {\n    this.loaded = true;\n    this.dispatchEvent(new Event('load', event));\n  }\n\n  onError(event: Event) {\n    this.error = true;\n    this.dispatchEvent(new Event('error', event));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-img': HbImg;\n  }\n}\n"],"names":[],"sourceRoot":""}