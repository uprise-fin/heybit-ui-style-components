{"version":3,"file":"components-molecule-tab-index-stories.b6bdeb27.iframe.bundle.js","mappings":";;;;;;;;;;;;;;AAgFA;;;;;AAKA;;;;AAKA","sources":["webpack://heybit-ui-styled-components/./src/components/molecule/tab/index.ts"],"sourcesContent":["import { basicVariables } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { getChildren } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n/**\n * @property value\n * @slot content 기본 컨텐츠 영역\n * @slot header 버튼 영역\n * @csspart header\n * @csspart content\n */\n\n@customElement('hb-tab')\nexport class HbTab extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  btns: HTMLElement[] = [];\n\n  contents: HTMLElement[] = [];\n\n  _value = '';\n\n  left = 0;\n\n  width = 0;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this.setIndicator();\n  }\n\n  static get properties() {\n    return {\n      left: { type: Number, Reflect: true },\n      width: { type: Number, Reflect: true },\n      value: { type: String, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    const wrap = await getChildren(this.children);\n    this.btns = wrap.filter((x) => x.slot === 'header');\n    this.contents = wrap.filter((x) => x.slot !== 'header');\n    this.setIndicator();\n  }\n\n  onClick(ev: Event) {\n    const target = ev.target as HTMLElement;\n    const value = this.btns.indexOf(target);\n    this.value = value.toString();\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  async setIndicator() {\n    if (!this.btns.length) return;\n    const number = +this._value;\n    const target = this.btns[number];\n    const { offsetWidth, offsetLeft } = await target;\n    this.left = offsetLeft - this.offsetLeft + basicVariables.layout.gutter;\n    this.width = offsetWidth - basicVariables.layout.gutter * 2;\n    this.btns.concat(this.contents).map((x) => x.removeAttribute('active'));\n    this.btns[number].setAttribute('active', '');\n    this.contents[number]?.setAttribute('active', '');\n  }\n\n  render() {\n    return html`\n      <div class=\"hb-tab__header\" id=\"header\" part=\"header\">\n        <slot\n          class=\"hb-tab__header__btns\"\n          id=\"btns\"\n          part=\"btns\"\n          @click=${this.onClick}\n          name=\"header\"\n        ></slot>\n        <i\n          class=\"hb-tab__header__indicator\"\n          style=\"width: ${this.width}px; transform: translateX(${this.left}px)\"\n        ></i>\n      </div>\n      <slot class=\"hb-tab__content\" id=\"content\" part=\"content\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-tab': HbTab;\n  }\n}\n"],"names":[],"sourceRoot":""}