{"version":3,"file":"components-atom-list-index-stories.c3b3dbd8.iframe.bundle.js","mappings":";;;;;;;;AA8EA;AACA;AACA;AACA;;;;AAIA;;;;;AAOA;AACA;;AAEA;;;;AAMA","sources":["webpack://heybit-ui-styled-components/./src/components/atom/list/index.ts"],"sourcesContent":["import { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { HbListEvent, HbListOption } from './type';\n\n/**\n * @fires event\n * @property src\n * @property multiSource\n * @property breakPoint\n * @property pcPrefix\n * @csspart picture\n * @csspart skeleton\n * @csspart img\n */\n\n@customElement('hb-list')\nexport class HbList extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  options: HbListOption[] = [];\n\n  attributeSync = false;\n\n  open = false;\n\n  value = '';\n\n  emptyText = '';\n\n  width = 0;\n\n  maxHeight = 0;\n\n  static get properties() {\n    return {\n      options: { type: Array, Reflect: true },\n      value: { type: String, Reflect: true },\n      emptyText: { type: String, Reflect: true },\n      width: { type: Number, Reflect: true },\n      maxHeight: { type: Number, Reflect: true },\n      attributeSync: { type: Boolean, Reflect: true },\n      open: { type: Boolean, Reflect: true }\n    };\n  }\n\n  get values() {\n    return this.options.map((x) => x.value) || [];\n  }\n\n  sto = setTimeout(() => {}, 0);\n\n  onSelect(ev: HbListEvent) {\n    this.adapterHide();\n    if (!(ev.target instanceof HTMLButtonElement)) return;\n    const { target } = ev;\n    const { value } = target.dataset;\n    if (this.value === value || !this.values.includes(value)) return;\n    if (this.attributeSync) this.setAttribute('value', value!);\n    this.value = value!;\n    this.onEvent(new CustomEvent('event'));\n    // this.dispatchEvent(new CustomEvent('event', ev));\n  }\n\n  onHide() {\n    this.blur();\n    this.open = false;\n  }\n\n  adapterHide() {\n    this.sto = setTimeout(() => this.onHide(), 0);\n  }\n\n  render() {\n    return html`\n      <div\n        class=\"hb-list__wrap${this.options?.length ? '' : ' hb-list__wrap--empty'}\"\n        @click=${this.onSelect}\n        @keyup=${(evt: KeyboardEvent) => evt.key === 'Enter' && this.onSelect.call(this)}\n        data-empty-text=${this.emptyText}\n        part=\"list\"\n        id=\"list\"\n      >\n        ${this.options?.map(\n          (x) =>\n            html`\n              <button\n                tabindex=\"0\"\n                type=\"button\"\n                class=\"hb-list__btn\"\n                ?data-selected=${x.value === this.value}\n                data-value=${x.value}\n              >\n                ${x.label}\n              </button>\n            `\n        )}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-list': HbList;\n  }\n}\n// const NAME = \"hb-list\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       properties = {\n//         id: {\n//           closeBtn: \"close-btn\",\n//           wrap: \"wrap\",\n//         },\n//       };\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isWrapEl.onanimationstart = () => this.onAnimationStart();\n//         this.isWrapEl.onanimationend = () => this.onAnimationEnd();\n//         this.isCloseBtnEl.onclick = () => this.onHide();\n//       }\n//       get isCloseBtnEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.closeBtn\n//         ) as HTMLButtonElement;\n//       }\n//       get isWrapEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.wrap\n//         ) as HTMLButtonElement;\n//       }\n\n//       onHide() {\n//         this.classList.add(this.isProperties.classList.animation);\n//         super.onHide();\n//       }\n//     }\n//   );\n"],"names":[],"sourceRoot":""}