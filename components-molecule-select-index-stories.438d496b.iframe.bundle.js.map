{"version":3,"file":"components-molecule-select-index-stories.438d496b.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;;;;;;;;;;AAaA","sources":["webpack://heybit-ui-styled-components/./src/components/molecule/select/index.ts"],"sourcesContent":["import '@/components/atom/icon';\nimport { HbListOption } from '@/components/atom/list/type';\nimport { Base } from '@/components/base';\nimport { getElement } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires event 값이 변경될때 발생\n * @property value 기본 값\n * @property options Options[] 옵션\n */\n\n@customElement('hb-select')\nexport class HbSelect extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  selectEl?: HTMLSelectElement;\n\n  disabled: boolean;\n\n  _value?: string;\n\n  options: HbListOption[] = [];\n\n  placeholder = '선택해주세요.';\n\n  emptyText = '데이터가 없습니다.';\n\n  static get properties() {\n    return {\n      _value: { type: String, Reflect: true },\n      value: { type: String, Reflect: true },\n      disabled: { type: Boolean, Reflect: true },\n      options: { type: Array, Reflect: true },\n      placeholder: { type: String, Reflect: true },\n      emptyText: { type: String, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    const selectEl = await getElement<HTMLSelectElement>(this.shadowRoot, 'select');\n    this.tabIndex = 0;\n    this.selectEl = selectEl;\n    this.onclick = () => selectEl.focus();\n    this.addEventListener('focus', () => {\n      this.setAttribute('data-focus', '');\n      this.selectEl.focus();\n    });\n    this.addEventListener('blur', () => this.removeAttribute('data-focus'));\n  }\n\n  get list() {\n    const placeholder: HbListOption[] = [\n      { value: undefined, label: this.placeholder, disabled: true }\n    ];\n    return this.options?.length\n      ? placeholder.concat(this.options)\n      : [{ value: null, label: this.emptyText, disabled: true }];\n  }\n\n  set value(value: string) {\n    if (this._value !== value) {\n      this.focus();\n      this._value = value;\n      this.blur();\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  render() {\n    return html`\n      <select\n        id=\"select\"\n        class=${'hb-select__el' + (this._value ? '' : ' hb-select__el--init')}\n        @change=${this.onSelect}\n        ?disabled=${this.disabled}\n      >\n        ${this.list.map(\n          (x, i) =>\n            html`\n              <option\n                ?selected=${this._value ? this._value === x.value : i === 0}\n                value=${x.value}\n                ?disabled=${x.disabled}\n              >\n                ${x.label}\n              </option>\n            `\n        )}\n      </select>\n      <span class=\"hb-select__icon-wrap\">\n        <hb-icon\n          class=\"hb-select__icon-wrap__el\"\n          icon=\"system/outline/arrow-dropdown\"\n          size=\"small\"\n        ></hb-icon>\n      </span>\n    `;\n  }\n\n  onSelect(ev: Event) {\n    ev.stopImmediatePropagation();\n    const { target } = ev;\n    if (!(target instanceof HTMLSelectElement)) return;\n    const { value } = target;\n    this.value = value!;\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  attributeChangedCallback(name: string, oldVal: string, newVal: string) {\n    if (name === 'value' && oldVal !== newVal) this.onSelect(new Event('change'));\n\n    super.attributeChangedCallback(name, oldVal, newVal);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-select': HbSelect;\n  }\n}\n"],"names":[],"sourceRoot":""}