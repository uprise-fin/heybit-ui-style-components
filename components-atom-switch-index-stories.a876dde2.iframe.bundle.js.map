{"version":3,"file":"components-atom-switch-index-stories.a876dde2.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;AAoCA;;ACMA;AACA;;AAIA;AACA;;;;AAKA","sources":["webpack://heybit-ui-styled-components/./src/components/atom/spinner/index.ts","webpack://heybit-ui-styled-components/./src/components/atom/switch/index.ts"],"sourcesContent":["import { Size } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n *\n */\n\n@customElement('hb-spinner')\nexport class HbSpinner extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  size: Size;\n\n  static get properties() {\n    return {\n      size: { type: String, reflect: true }\n    };\n  }\n\n  render() {\n    return html`\n      <svg class=\"hb-spinner__svg\" viewBox=\"0 0 50 50\">\n        <circle\n          class=\"hb-spinner__svg__circle\"\n          cx=\"25\"\n          cy=\"25\"\n          r=\"20\"\n          fill=\"none\"\n          stroke-width=\"5\"\n        ></circle>\n      </svg>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-spinner': HbSpinner;\n  }\n}\n","import '@/components/atom/spinner';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires event\n * @property value\n */\n\n@customElement('hb-switch')\nexport class HbSwitch extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  value: boolean;\n\n  loading: boolean;\n\n  static get properties() {\n    return {\n      value: { type: Boolean, Reflect: true },\n      loading: { type: Boolean, Reflect: true }\n    };\n  }\n\n  onChange() {\n    if (this.loading) return;\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  onEnter(ev: KeyboardEvent) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      this.onChange();\n    }\n  }\n\n  render() {\n    return html`<label\n      tabindex=\"0\"\n      @keydown=${this.onEnter}\n      class=\"hb-switch__label${this.value ? ' hb-switch__label--active' : ''}${this.loading\n        ? ' hb-switch__label--loading'\n        : ''}\"\n      ><input\n        @change=${this.onChange}\n        ?checked=${this.value}\n        type=\"checkbox\"\n        class=\"hb-switch__input\" /><i class=\"hb-switch__icon\"></i\n      ><hb-spinner class=\"hb-switch__spinner\" size=\"medium\"></hb-spinner\n    ></label>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-switch': HbSwitch;\n  }\n}\n// const NAME = \"hb-list\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       properties = {\n//         id: {\n//           closeBtn: \"close-btn\",\n//           wrap: \"wrap\",\n//         },\n//       };\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isWrapEl.onanimationstart = () => this.onAnimationStart();\n//         this.isWrapEl.onanimationend = () => this.onAnimationEnd();\n//         this.isCloseBtnEl.onclick = () => this.onHide();\n//       }\n//       get isCloseBtnEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.closeBtn\n//         ) as HTMLButtonElement;\n//       }\n//       get isWrapEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.wrap\n//         ) as HTMLButtonElement;\n//       }\n\n//       onHide() {\n//         this.classList.add(this.isProperties.classList.animation);\n//         super.onHide();\n//       }\n//     }\n//   );\n"],"names":[],"sourceRoot":""}