{"version":3,"file":"components-organism-header-index-stories.5fef249a.iframe.bundle.js","mappings":";AAgLA;;AAIA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAMA;;AAKA;AAIA;;AAIA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAMA;;AAKA;AAUA;;AAIA;;AAEA;AACA;AACA;;AAIA;AAKA;;AAIA;;AAEA;AACA;AACA;;AAIA;AASA;;AAIA;AACA;AACA;AACA;;AAIA;AAIA;;AAIA;AACA;AACA;AACA;;AAIA;AAyBA;;AAGA;;;AAGA;AACA;;AAIA;AAIA;;AAGA;;;AAGA;AACA;;AAKA;AA/PA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;;AAKA;AACA;;AAEA;;AAGA;AAGA;AACA;AACA;AACA;AACA;;;;;AAMA;;AAKA;AAwKA;AACA;;;AAGA;AACA;AAGA;;AAqFA;;AAEA;;;;;;;AAOA;;;;;AAKA;;AAEA;;;AAGA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;AAKA;;AAEA;AACA;;AAEA;;;;;;;;;;;AAWA;;AAEA;;;;;;;AAOA;;;;;;;AAOA;;;AAGA;;;;;;;AAOA;;;AAGA;AACA;AACA;;AAEA;AAGA;AACA;AACA;;;;;;AAMA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;AAKA;AACA;;;AAGA;;;AAGA;;;;;AAKA;;;AAGA;;;;;;;;;AASA;;;;;;;AAQA;;;;;;;;;;;;;ACnfA;AACA;AACA;AACA;;;;AAIA;;;;;AAOA;AACA;;AAEA;;;;AAMA;AC1EA;;;;AAIA;;AAGA;;ACQA;AACA;;AAIA;AACA;;;;AAKA;;ACsVA;AAEA;;AAGA;;;AAGA;AACA;;AAEA;;AAEA;AAEA;AAKA;AAKA;AACA;AACA;AAGA;;AAIA;;;AAOA;;AAEA;AAEA;;;AAOA;;AAEA;AAEA;;AC5XA;AACA;AACA;AACA;;;;AAIA;AAGA;;;;;;;;AAQA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAKA;;AC1BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;;;;;;;;;;;;AAaA;;ACdA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;;;;;;AAMA;AACA;;;;;;AAQA;AACA;AAGA;AACA;;AAEA;AACA;;AAEA;;;AAIA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;;AAMA;;;ACvEA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;;;;;;;;;;AAaA;ACzDA;AACA;AACA;AAGA;;;;;;AC2BA;;;;;AAKA;;;;AAKA;;ACiBA;AACA;;AAGA;AAYA;;;AAGA;AACA;;AAEA;AACA;;;AAKA;;;AC1FA;;ACuEA;AACA;;;AAGA;AACA;AACA;;AAGA;AAIA;AAGA;AACA;;AAIA;AAIA;;AAGA;AACA;AACA;AACA;;AAEA;;;AAKA;AAIA;AAGA;;AAIA;AAIA;AAIA;;;AAMA;;AAEA;;;AAIA","sources":["webpack://heybit-ui-styled-components/./src/components/organism/header/index.ts","webpack://heybit-ui-styled-components/./src/components/atom/list/index.ts","webpack://heybit-ui-styled-components/./src/components/atom/responsive/index.ts","webpack://heybit-ui-styled-components/./src/components/atom/switch/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/carousel/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/modal/event-dialog/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/modal/page-dialog/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/modal/sheet-dialog/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/select/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/skeleton/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/tab/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/toast/index.ts","webpack://heybit-ui-styled-components/./src/components/molecule/tooltip/index.ts","webpack://heybit-ui-styled-components/./src/components/organism/footer/index.ts"],"sourcesContent":["import '@/components/atom/responsive';\nimport '@/components/molecule/anchor';\nimport '@/components/molecule/button';\nimport '@/components/molecule/img';\nimport { Size } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { HbButtonTheme } from '@/components/molecule/button/type';\nimport { HbAnchor } from '@/module';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { HbHeaderMyMenu, HbHeaderNavi, HbHeaderType, HbHeaderUser } from './type';\n/**\n * @fires change 값이 변경될때 발생\n * @property attributeSync true 시 value값이 arrtibute 싱크됨\n * @property fixed true 시 overflow에서 넘어감\n * @property value 기본 값\n * @property options Options[] 옵션\n * @property search 서치 온오프\n * @slot icon - optional, i<con부분을 커스텀할때 사용\n * @slot caret - optional, caret부분을 커스텀할때 사용\n * @slot option - required, select의 옵션 엘리먼트\n * @csspart label>\n * @csspart list\n */\n\n@customElement('hb-header')\nexport class HbHeader extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  active: string = 'none';\n\n  type: HbHeaderType;\n\n  user: HbHeaderUser;\n\n  loggedin: boolean;\n\n  pending: boolean;\n\n  sidemenu: boolean;\n\n  gnb: HbHeaderNavi[];\n\n  myMenu: HbHeaderMyMenu[];\n\n  authMenu: HbHeaderNavi[];\n\n  defaultMenu: HbHeaderNavi[];\n\n  get userName() {\n    const name = this.user?.name;\n    if (!this.loggedin || !name) return '';\n    return this.user?.global?.name || `${name}님`;\n  }\n\n  get welcomeMessage() {\n    return this.user?.global?.message || `${this.userName} 환영합니다.`;\n  }\n\n  get userEmail() {\n    const email = this.user?.email;\n    if (this.loggedin && email) return `${email}`;\n    return '';\n  }\n\n  get isGnb() {\n    if (this.gnb) return this.gnb;\n  }\n\n  get isGnbString() {\n    return JSON.stringify(this.gnb);\n  }\n\n  isActive(href = '') {\n    return href && location.pathname.startsWith(href) ? ' active' : '';\n  }\n\n  get isMyMenu() {\n    if (this.myMenu) return this.myMenu;\n  }\n\n  get isAuthMenu() {\n    if (this.authMenu) return this.authMenu;\n  }\n\n  get isDefaultMenu() {\n    if (this.defaultMenu) return this.defaultMenu;\n  }\n\n  get isMyMenuString() {\n    return JSON.stringify(this.isMyMenu);\n  }\n\n  get isAuthMenuString() {\n    return JSON.stringify(this.isAuthMenu);\n  }\n\n  get isDefaultMenuString() {\n    return JSON.stringify(this.defaultMenu);\n  }\n\n  get isType() {\n    return this.type ?? 'normal';\n  }\n\n  static get properties() {\n    return {\n      type: { type: String, Reflect: true },\n      active: { type: String, Reflect: true },\n      sidemenu: { type: Boolean, Reflect: true },\n      loggedin: { type: Boolean, Reflect: true },\n      pending: { type: Boolean, Reflect: true },\n      navigations: { type: Array, Reflect: true },\n      gnb: { type: Array, Reflect: true },\n      defaultMenu: { type: Array, Reflect: true },\n      myMenu: { type: Array, Reflect: true },\n      authMenu: { type: Array, Reflect: true },\n      user: { type: Object, Reflect: true }\n    };\n  }\n\n  gnbTemplateForDesktop() {\n    return html`\n      ${this.gnb?.map(\n        (x) =>\n          html`<hb-anchor\n            class=\"hb-anchor${this.isActive(x.href || x.active)}${this.active === x.active\n              ? ' active'\n              : ''}\"\n            href=${x.href}\n            target=${x.target}\n            @event=${this.adapterEvent.bind(this, x.event)}\n            @mouseenter=${this.onEnterGroup}\n            @mouseleave=${this.onLeaveGroup}\n            >${x.name}${x.chip\n              ? html`<hb-img\n                  class=\"hb-header__chip\"\n                  alt=${x.chip.alt}\n                  src=${x.chip.src}\n                  loadingWidth=${26}\n                />`\n              : ''}${x.group\n              ? html`<hb-icon icon=\"system/outline/arrow-dropdown\" size=\"xsmall\"></hb-icon>\n                  <div\n                    class=\"hb-header__group-menu\"\n                    @mouseenter=${this.onEnterGroup}\n                    @mouseleave=${this.onLeaveGroup}\n                  >\n                    ${x.group.map(\n                      (y) => html`\n                        <hb-anchor\n                          class=\"hb-header__group-menu__item${this.isActive(\n                            y.href || y.active\n                          )}${this.active === y.active ? ' active' : ''}\"\n                          href=${y.href}\n                          target=${y.target}\n                          @event=${this.adapterEvent.bind(this, y.event)}\n                          ><strong>${y.name}</strong>\n                          <p>${y.desc}</p></hb-anchor\n                        >\n                      `\n                    )}\n                    <i class=\"hb-header__group-menu__layer\"></i>\n                    <i class=\"hb-header__group-menu__tip\"></i>\n                  </div>`\n              : ''}</hb-anchor\n          >`\n      )}\n    `;\n  }\n\n  gnbTemplate = (() => {\n    let isGnb = this.isGnbString;\n    let template = html`\n      ${this.isGnb?.map(\n        (x) =>\n          html`<hb-anchor\n            class=\"hb-anchor\"\n            href=${x.group ? '' : x.href}\n            target=${x.target}\n            @event=${this.adapterEvent.bind(this, x.event)}\n            @click=${x.group ? this.onClickGroup : null}\n            >${x.name}${x.chip\n              ? html`<hb-img\n                  class=\"hb-header__chip\"\n                  alt=${x.chip.alt}\n                  src=${x.chip.src}\n                  loadingWidth=${26}\n                />`\n              : ''}${x.group\n              ? html`<hb-icon icon=\"system/outline/arrow-dropdown\" size=\"xsmall\"></hb-icon>\n                  <div class=\"hb-header__group-menu\">\n                    ${x.group.map(\n                      (y) => html`\n                        <hb-anchor\n                          class=\"hb-header__group-menu__item\"\n                          href=${y.href}\n                          target=${y.target}\n                          @event=${this.adapterEvent.bind(this, y.event)}\n                          ><strong>${y.name}</strong>\n                          <p>${y.desc}</p></hb-anchor\n                        >\n                      `\n                    )}\n                    <i class=\"hb-header__group-menu__layer\"></i>\n                    <i class=\"hb-header__group-menu__tip\"></i>\n                  </div>`\n              : ''}</hb-anchor\n          >`\n      )}\n    `;\n    return () => {\n      if (isGnb !== this.isGnbString) {\n        isGnb = this.isGnbString;\n        template = html`\n          ${this.isGnb?.map(\n            (x) =>\n              html`<hb-anchor\n                class=\"hb-anchor\"\n                href=${x.group ? '' : x.href}\n                target=${x.target}\n                @event=${this.adapterEvent.bind(this, x.event)}\n                @click=${x.group ? this.onClickGroup : null}\n                >${x.name}${x.chip\n                  ? html`<hb-img\n                      class=\"hb-header__chip\"\n                      alt=${x.chip.alt}\n                      src=${x.chip.src}\n                      loadingWidth=${26}\n                    />`\n                  : ''}${x.group\n                  ? html`<hb-icon icon=\"system/outline/arrow-dropdown\" size=\"xsmall\"></hb-icon>\n                      <div class=\"hb-header__group-menu\">\n                        ${x.group.map(\n                          (y) => html`\n                            <hb-anchor\n                              class=\"hb-header__group-menu__item\"\n                              href=${y.href}\n                              target=${y.target}\n                              @event=${this.adapterEvent.bind(this, y.event)}\n                              ><strong>${y.name}</strong>\n                              <p>${y.desc}</p></hb-anchor\n                            >\n                          `\n                        )}\n                        <i class=\"hb-header__group-menu__layer\"></i>\n                        <i class=\"hb-header__group-menu__tip\"></i>\n                      </div>`\n                  : ''}</hb-anchor\n              >`\n          )}\n        `;\n        return template;\n      }\n      return template;\n    };\n  })();\n\n  myMenuTemplate = (() => {\n    let cacheSize: Size = 'medium';\n    let isMyMenu = this.isMyMenuString;\n    let template = html`\n      ${this.isMyMenu?.map(\n        (x) =>\n          html`<hb-button\n            class=\"hb-button\"\n            @event=${this.adapterEvent.bind(this, x.event)}\n            type=\"rectangle\"\n            theme=${x.theme}\n            size=${cacheSize}\n            >${x.name}</hb-button\n          >`\n      )}\n    `;\n    return (size: Size = 'medium') => {\n      if (isMyMenu !== this.isMyMenuString || cacheSize !== size) {\n        cacheSize = size;\n        isMyMenu = this.isMyMenuString;\n        template = html`\n          ${this.isMyMenu?.map(\n            (x) =>\n              html`<hb-button\n                class=\"hb-button\"\n                @event=${this.adapterEvent.bind(this, x.event)}\n                type=\"rectangle\"\n                theme=${x.theme}\n                size=${cacheSize}\n                >${x.name}</hb-button\n              >`\n          )}\n        `;\n        return template;\n      }\n      return template;\n    };\n  })();\n\n  authMenuTemplate = (() => {\n    let isAuthMenu = this.isAuthMenuString;\n    let template = html`\n      ${this.isAuthMenu?.map(\n        (x) =>\n          html`<hb-anchor\n            class=\"hb-anchor\"\n            href=${x.href}\n            target=${x.target}\n            @event=${this.adapterEvent.bind(this, x.event)}\n            >${x.name}</hb-anchor\n          >`\n      )}\n    `;\n    return () => {\n      if (isAuthMenu !== this.isAuthMenuString) {\n        isAuthMenu = this.isAuthMenuString;\n        template = html`\n          ${this.isAuthMenu?.map(\n            (x) =>\n              html`<hb-anchor\n                class=\"hb-anchor\"\n                href=${x.href}\n                target=${x.target}\n                @event=${this.adapterEvent.bind(this, x.event)}\n                >${x.name}</hb-anchor\n              >`\n          )}\n        `;\n        return template;\n      }\n      return template;\n    };\n  })();\n\n  defaultMenuForDesktopTemplate() {\n    const themes = ['', 'secondary'];\n    return html`${this.isDefaultMenu?.map(\n      (x, i) =>\n        html`<hb-button\n          class=\"hb-button${this.active === x.active ? ' active' : ''}\"\n          theme=${themes[i]}\n          type=\"radius\"\n          size=\"small\"\n          @event=${this.adapterEvent.bind(this, x.event)}\n          >${x.name}</hb-button\n        >`\n    )}`;\n  }\n\n  defaultMenuTemplate = (() => {\n    const themes: HbButtonTheme[] = ['quaternary', 'primary'];\n    let isDefaultMenu = this.isDefaultMenuString;\n    let template = html`\n      ${this.isDefaultMenu?.map(\n        (x, i) => html`<hb-button\n          class=\"hb-button\"\n          theme=${themes[i]}\n          size=\"large\"\n          type=\"rectangle\"\n          @event=${this.adapterEvent.bind(this, x.event)}\n          >${x.name}</hb-button\n        >`\n      )}\n    `;\n    return () => {\n      if (isDefaultMenu !== this.isDefaultMenuString) {\n        isDefaultMenu = this.isDefaultMenuString;\n        template = html`\n          ${this.isDefaultMenu?.map(\n            (x, i) => html`<hb-button\n              class=\"hb-button\"\n              theme=${themes[i]}\n              size=\"large\"\n              type=\"rectangle\"\n              @event=${this.adapterEvent.bind(this, x.event)}\n              >${x.name}</hb-button\n            >`\n          )}\n        `;\n      }\n      return template;\n    };\n  })();\n\n  onClose() {\n    this.dispatchEvent(new CustomEvent('close'));\n  }\n\n  onClickGroup(event: Event) {\n    const path = event.composedPath && event.composedPath();\n    const anchor = path[0];\n    if (anchor instanceof HbAnchor) {\n      event.stopPropagation();\n      if (anchor.classList.contains('open')) anchor.classList.remove('open');\n      else anchor.classList.add('open');\n    }\n  }\n\n  onEnterGroup(event: Event) {\n    const path = event.composedPath && event.composedPath();\n    let index = -1;\n    while (path[++index] instanceof HbAnchor) {\n      (path[index] as HTMLElement).classList.add('open');\n    }\n  }\n\n  onLeaveGroup(event: Event) {\n    const path = event.composedPath && event.composedPath();\n    let index = -1;\n    while (path[++index] instanceof HbAnchor) {\n      (path[index] as HTMLElement).classList.remove('open');\n    }\n  }\n\n  onEnterSide() {\n    this.sidemenu = true;\n  }\n\n  onLeaveSide() {\n    this.sidemenu = false;\n  }\n\n  adapterEvent(event: Function | undefined) {\n    if (event instanceof Function) {\n      event();\n      this.sidemenu = false;\n    }\n  }\n\n  render() {\n    return html`<hb-responsive>\n      <div slot=\"mobile\" part=\"mobile\" class=\"hb-header--mobile\">\n        <hb-if ?value=${this.isType === 'normal'}>\n          <div class=\"hb-header--mobile__navibar\">\n            <hb-anchor @event=${this.onEvent} class=\"hb-anchor\"\n              ><hb-icon\n                icon=\"graphic/heybit\"\n                size=\"large\"\n                style=\"--husc__icon__size__large: var(--husc__header__logo__width--mobile);\"\n              ></hb-icon\n            ></hb-anchor>\n            <hb-button @event=${this.onEnterSide} class=\"hb-button\"\n              ><hb-icon icon=\"system/outline/menu-side\" size=\"medium\"></hb-icon\n            ></hb-button>\n          </div>\n          <hb-transition\n            @click=${this.onLeaveSide}\n            class=\"hb-header--mobile__side-menu\"\n            ?show=${this.sidemenu}\n            type=\"fade\"\n          >\n            <hb-transition ?show=${this.sidemenu} type=\"right-left\">\n              <div class=\"hb-header--mobile__side-menu__content\">\n                <div class=\"hb-header--mobile__side-menu__content__my\">\n                  <hb-if ?value=${this.pending}>\n                    <hb-skeleton type=\"drop-menu-top\"></hb-skeleton>\n                  </hb-if>\n                  <hb-if ?value=${!this.pending}>\n                    <strong>${this.welcomeMessage}</strong>\n                    <hb-if ?value=${this.loggedin}>\n                      <p>${this.userEmail}</p>\n                      <div>${this.myMenuTemplate()}</div>\n                    </hb-if>\n                    <hb-if ?value=${!this.loggedin}>\n                      <div class=\"hb-header--mobile__side-menu__content__my__btns\">\n                        ${this.defaultMenuTemplate()}\n                      </div>\n                    </hb-if>\n                  </hb-if>\n                </div>\n                <div class=\"hb-header--mobile__side-menu__content__menu\">${this.gnbTemplate()}</div>\n                <div class=\"hb-header--mobile__side-menu__content__auth\">\n                  <hb-if ?value=${!this.pending && this.loggedin}>\n                    ${this.authMenuTemplate()}\n                  </hb-if>\n                  <hb-if ?value=${this.pending}>\n                    <hb-skeleton\n                      class=\"hb-header--mobile__skeleton\"\n                      type=\"drop-menu-bottom\"\n                    ></hb-skeleton>\n                  </hb-if>\n                </div>\n              </div>\n            </hb-transition>\n          </hb-transition>\n        </hb-if>\n        <hb-if ?value=${this.isType === 'clear'}>\n          <div class=\"hb-header--mobile__navibar\">\n            <hb-anchor @event=${this.onEvent} class=\"hb-anchor\"\n              ><hb-icon\n                icon=\"graphic/heybit\"\n                size=\"large\"\n                style=\"--husc__icon__size__large: var(--husc__header__logo__width--mobile);\"\n              ></hb-icon\n            ></hb-anchor>\n            <hb-button class=\"hb-button\" @click=${this.onClose}\n              ><hb-icon icon=\"system/outline/close\" size=\"medium\"></hb-icon\n            ></hb-button>\n          </div>\n        </hb-if>\n      </div>\n      <div slot=\"desktop\" part=\"desktop\" class=\"hb-header--desktop\">\n        <hb-if ?value=${this.isType === 'normal'}>\n          <div class=\"hb-header--desktop__navibar\">\n            <div class=\"hb-header--desktop__navibar__routes\">\n              <hb-anchor @event=${this.onEvent} class=\"hb-anchor\"\n                ><hb-icon\n                  icon=\"graphic/heybit\"\n                  size=\"large\"\n                  style=\"--husc__icon__size__large: var(--husc__header__logo__width--desktop);\"\n                ></hb-icon\n              ></hb-anchor>\n              ${this.gnbTemplateForDesktop()}\n            </div>\n            <div class=\"hb-header--desktop__navibar__actions\">\n              <hb-if ?value=${this.pending}> <hb-skeleton type=\"hamburger\"></hb-skeleton></hb-if>\n              <hb-if ?value=${!this.pending}>\n                <hb-if ?value=${this.loggedin}>\n                  <hb-button\n                    class=\"hb-header--desktop__navibar__actions__hamburber${this.sidemenu\n                      ? ' open'\n                      : ''}\"\n                    @mouseenter=${this.onEnterSide}\n                    @mouseleave=${this.onLeaveSide}\n                    >${this.userName}<hb-icon\n                      icon=\"system/outline/arrow-dropdown\"\n                      size=\"xsmall\"\n                    ></hb-icon\n                  ></hb-button>\n                </hb-if>\n                <hb-if ?value=${!this.loggedin} class=\"hb-header--desktop__navibar__actions__btns\">\n                  ${this.defaultMenuForDesktopTemplate()}\n                </hb-if>\n              </hb-if>\n            </div>\n          </div>\n          <hb-transition\n            @mouseenter=${this.onEnterSide}\n            @mouseleave=${this.onLeaveSide}\n            class=\"hb-header--desktop__side-menu\"\n            ?show=${this.sidemenu && this.loggedin && !this.pending}\n            type=\"fade\"\n          >\n            <div class=\"hb-header--desktop__side-menu__content\">\n              <div class=\"hb-header--desktop__side-menu__content__my\">\n                <strong>${this.welcomeMessage}</strong>\n                <p>${this.userEmail}</p>\n              </div>\n              <div class=\"hb-header--desktop__side-menu__content__menu\">\n                ${this.myMenuTemplate('small')}\n              </div>\n              <div class=\"hb-header--desktop__side-menu__content__auth\">\n                ${this.authMenuTemplate()}\n              </div>\n            </div>\n          </hb-transition>\n        </hb-if>\n        <hb-if ?value=${this.isType === 'clear'}>\n          <div class=\"hb-header--desktop__navibar\">\n            <div class=\"hb-header--desktop__navibar__routes\">\n              <hb-anchor @event=${this.onEvent} class=\"hb-anchor\"\n                ><hb-icon\n                  icon=\"graphic/heybit\"\n                  size=\"large\"\n                  style=\"--husc__icon__size__large: var(--husc__header__logo__width--desktop);\"\n                ></hb-icon\n              ></hb-anchor>\n            </div>\n            <div class=\"hb-header--desktop__navibar__actions\">\n              <hb-button class=\"hb-button\" @click=${this.onClose}\n                ><hb-icon icon=\"system/outline/close\" size=\"medium\"></hb-icon\n              ></hb-button>\n            </div>\n          </div>\n        </hb-if>\n      </div>\n    </hb-responsive>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-header': HbHeader;\n  }\n}\n","import { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { HbListEvent, HbListOption } from './type';\n\n/**\n * @fires event\n * @property src\n * @property multiSource\n * @property breakPoint\n * @property pcPrefix\n * @csspart picture\n * @csspart skeleton\n * @csspart img\n */\n\n@customElement('hb-list')\nexport class HbList extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  options: HbListOption[] = [];\n\n  attributeSync = false;\n\n  open = false;\n\n  value = '';\n\n  emptyText = '';\n\n  width = 0;\n\n  maxHeight = 0;\n\n  static get properties() {\n    return {\n      options: { type: Array, Reflect: true },\n      value: { type: String, Reflect: true },\n      emptyText: { type: String, Reflect: true },\n      width: { type: Number, Reflect: true },\n      maxHeight: { type: Number, Reflect: true },\n      attributeSync: { type: Boolean, Reflect: true },\n      open: { type: Boolean, Reflect: true }\n    };\n  }\n\n  get values() {\n    return this.options.map((x) => x.value) || [];\n  }\n\n  sto = setTimeout(() => {}, 0);\n\n  onSelect(ev: HbListEvent) {\n    this.adapterHide();\n    if (!(ev.target instanceof HTMLButtonElement)) return;\n    const { target } = ev;\n    const { value } = target.dataset;\n    if (this.value === value || !this.values.includes(value)) return;\n    if (this.attributeSync) this.setAttribute('value', value!);\n    this.value = value!;\n    this.onEvent(new CustomEvent('event'));\n    // this.dispatchEvent(new CustomEvent('event', ev));\n  }\n\n  onHide() {\n    this.blur();\n    this.open = false;\n  }\n\n  adapterHide() {\n    this.sto = setTimeout(() => this.onHide(), 0);\n  }\n\n  render() {\n    return html`\n      <div\n        class=\"hb-list__wrap${this.options?.length ? '' : ' hb-list__wrap--empty'}\"\n        @click=${this.onSelect}\n        @keyup=${(evt: KeyboardEvent) => evt.key === 'Enter' && this.onSelect.call(this)}\n        data-empty-text=${this.emptyText}\n        part=\"list\"\n        id=\"list\"\n      >\n        ${this.options?.map(\n          (x) =>\n            html`\n              <button\n                tabindex=\"0\"\n                type=\"button\"\n                class=\"hb-list__btn\"\n                ?data-selected=${x.value === this.value}\n                data-value=${x.value}\n              >\n                ${x.label}\n              </button>\n            `\n        )}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-list': HbList;\n  }\n}\n// const NAME = \"hb-list\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       properties = {\n//         id: {\n//           closeBtn: \"close-btn\",\n//           wrap: \"wrap\",\n//         },\n//       };\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isWrapEl.onanimationstart = () => this.onAnimationStart();\n//         this.isWrapEl.onanimationend = () => this.onAnimationEnd();\n//         this.isCloseBtnEl.onclick = () => this.onHide();\n//       }\n//       get isCloseBtnEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.closeBtn\n//         ) as HTMLButtonElement;\n//       }\n//       get isWrapEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.wrap\n//         ) as HTMLButtonElement;\n//       }\n\n//       onHide() {\n//         this.classList.add(this.isProperties.classList.animation);\n//         super.onHide();\n//       }\n//     }\n//   );\n","import { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { basicVariables } from '@/index';\n\n@customElement('hb-responsive')\nexport class HbResponsive extends Base {\n  point: number = basicVariables.layout.media;\n\n  static get properties() {\n    return {\n      point: { type: Number, Reflect: true }\n    };\n  }\n\n  get mediaMobile() {\n    const mobile = this.point - 1;\n    return `@media (max-width: ${mobile}px) {.hb-responsive__slot--desktop{display: none;};`;\n  }\n\n  get mediaDesktop() {\n    const desktop = this.point;\n    return `@media (min-width: ${desktop}px) {.hb-responsive__slot--mobile{display: none;};`;\n  }\n\n  render() {\n    return html`<style>\n        ${this.mediaMobile}\n      </style>\n      <slot name=\"mobile\" class=\"hb-responsive__slot--mobile\"></slot>\n      <style>\n        ${this.mediaDesktop}\n      </style>\n      <slot name=\"desktop\" class=\"hb-responsive__slot--desktop\"></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-responsive': HbResponsive;\n  }\n}\n","import '@/components/atom/spinner';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires event\n * @property value\n */\n\n@customElement('hb-switch')\nexport class HbSwitch extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  value: boolean;\n\n  loading: boolean;\n\n  static get properties() {\n    return {\n      value: { type: Boolean, Reflect: true },\n      loading: { type: Boolean, Reflect: true }\n    };\n  }\n\n  onChange() {\n    if (this.loading) return;\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  onEnter(ev: KeyboardEvent) {\n    if (ev.key === 'Enter') {\n      ev.preventDefault();\n      this.onChange();\n    }\n  }\n\n  render() {\n    return html`<label\n      tabindex=\"0\"\n      @keydown=${this.onEnter}\n      class=\"hb-switch__label${this.value ? ' hb-switch__label--active' : ''}${this.loading\n        ? ' hb-switch__label--loading'\n        : ''}\"\n      ><input\n        @change=${this.onChange}\n        ?checked=${this.value}\n        type=\"checkbox\"\n        class=\"hb-switch__input\" /><i class=\"hb-switch__icon\"></i\n      ><hb-spinner class=\"hb-switch__spinner\" size=\"medium\"></hb-spinner\n    ></label>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-switch': HbSwitch;\n  }\n}\n// const NAME = \"hb-list\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       properties = {\n//         id: {\n//           closeBtn: \"close-btn\",\n//           wrap: \"wrap\",\n//         },\n//       };\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isWrapEl.onanimationstart = () => this.onAnimationStart();\n//         this.isWrapEl.onanimationend = () => this.onAnimationEnd();\n//         this.isCloseBtnEl.onclick = () => this.onHide();\n//       }\n//       get isCloseBtnEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.closeBtn\n//         ) as HTMLButtonElement;\n//       }\n//       get isWrapEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.wrap\n//         ) as HTMLButtonElement;\n//       }\n\n//       onHide() {\n//         this.classList.add(this.isProperties.classList.animation);\n//         super.onHide();\n//       }\n//     }\n//   );\n","import '@/components/molecule/skeleton';\nimport { Base } from '@/components/base';\nimport { getChildren } from '@/utils';\nimport { html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { HbCarouselEventStatus } from './type';\n\n/**\n * @property open 온 오프\n * @property width\n * @property persistent\n * @property hideCloseBtn\n * @property icon\n * @property title\n * @property auto Boolean, 자동롤링\n * @property pause Boolean, 마우스오버시 멈춤\n * @property infinite Boolean, 무한롤링 (마지막 오른쪽 아이템에서 첫 번째로 넘어가지 않고, 오른쪽으로 계속 진행)\n * @property indicate Boolean, 인디케이터\n * @property duration Number, 자동롤링 시간\n * @property speed Number, 롤링 속도\n * @property hasVariableChildren 메인 배너용, 영역 생성 후에 preload된 자식을 할당하는 등 자식이 가변적인 경우\n * @slot content - optional, 내용\n * @slot button - optional, 버튼\n * @slot anchor - optional, 앵커\n * @csspart container\n * @csspart icon\n * @csspart title\n * @csspart content\n * @csspart buttons\n * @csspart anchor\n */\n\n@customElement('hb-carousel')\nexport class HbCarousel extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  /**\n   * @property {boolean} hasVariableChildren 메인 배너용, 영역 생성 후에 preload된 자식을 할당하는 등 자식이 가변적인 경우\n   */\n  @property({ type: Boolean })\n  hasVariableChildren: boolean = false;\n\n  //옵션\n  auto = false;\n\n  pause = false;\n\n  infinite = false;\n\n  rolling = false;\n\n  indicate = false;\n\n  draggable = false;\n\n  clickable = false;\n\n  moveable = false;\n\n  duration = 3000;\n\n  speed = 300;\n\n  flexWidth = 0;\n\n  fakeLength = 1;\n\n  index: number; // 현재 인덱스\n\n  visibleLength: number;\n\n  holderFlag = false;\n\n  _userIndex: number; // 인피니트등에 쓰이기 위해 내부에서 실제로 사용하는 인덱스\n\n  itemLength: number;\n\n  itemElements: HTMLElement[];\n\n  startPointer = {\n    clientX: 0,\n    clientY: 0\n  };\n\n  dragDistance = 0;\n\n  eventStatus: HbCarouselEventStatus = 'done';\n\n  sto: ReturnType<typeof setTimeout>;\n\n  // get open() {\n  //   return this._open;\n  // }\n  // set open(val: boolean) {\n  //   if (this._open !== val) {\n  //     this._open = val\n  //     this.onToggle(val)\n  //   }\n  // }\n\n  // @property()\n  // value!: string;\n  static get properties() {\n    return {\n      auto: { type: Boolean, Reflect: true },\n      pause: { type: Boolean, Reflect: true },\n      infinite: { type: Boolean, Reflect: true },\n      indicate: { type: Boolean, Reflect: true },\n      rolling: { type: Boolean, Reflect: true },\n      holderFlag: { type: Boolean, Reflect: true },\n      draggable: { type: Boolean, Reflect: true },\n      eventStatus: { type: String, Reflect: true },\n      dragDistance: { type: Number, Reflect: true },\n      index: { type: Number, Reflect: true },\n      flexWidth: { type: Number, Reflect: true },\n      fakeLength: { type: Number, Reflect: true },\n      itemLength: { type: Number, Reflect: true },\n      transitionFlag: { type: Boolean, Reflect: true },\n      visibleLength: { type: Number, Reflect: true },\n      duration: { type: Number, Reflect: true },\n      speed: { type: Number, Reflect: true }\n    };\n  }\n\n  get totalWidth() {\n    return (this.itemLength / this.visibleLength) * 100;\n  }\n\n  get transitionFlag() {\n    if (this.eventStatus === 'done') return true;\n    return false;\n  }\n\n  get positions() {\n    const arrayLength = this.itemLength * (this.infinite ? 1 + 1 + this.fakeLength : 1);\n    const index = this.infinite ? -this.itemLength : 0;\n    return Array(arrayLength)\n      .fill(null)\n      .map((_, i) => i + index)\n      .map((x) => (x * this.clientWidth) / this.visibleLength);\n  }\n\n  set userIndex(index: number) {\n    if (this.infinite) index -= this.itemLength;\n    this._userIndex = index;\n  }\n\n  get userIndex() {\n    return this._userIndex;\n  }\n\n  get transitionDuration() {\n    if (this.holderFlag) return 1000000000;\n    if (this.transitionFlag) return this.rolling ? this.duration : this.speed;\n    return 0;\n  }\n\n  get itemPosition() {\n    if (this.holderFlag) return '';\n    const currentPosition = (this.index * this.clientWidth) / this.visibleLength;\n    if (['doing', 'fake'].includes(this.eventStatus)) {\n      this.userIndex = this.closeIndex(currentPosition + this.dragDistance * 2);\n      return `${-currentPosition - this.dragDistance}px`;\n    }\n\n    return `${(this.index / this.visibleLength) * -100}%`;\n  }\n\n  get shouldLazyUpdate() {\n    return this.hasVariableChildren;\n  }\n\n  onResizeBound = this.onResize.bind(this);\n\n  onEventStartBound = this.onEventStart.bind(this);\n\n  onEventEndBound = this.onEventEnd.bind(this);\n\n  onEventDoingBound = this.onEventDoing.bind(this);\n\n  @state()\n  private clonedItemsBefore: HTMLElement[] = [];\n\n  @state()\n  private clonedItemsAfter: HTMLElement[] = [];\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    this.itemElements = await getChildren(this.children);\n    this.itemLength = this.itemElements.length;\n\n    if (!this.shouldLazyUpdate && this.infinite) {\n      const cloneAppend = (element: HTMLElement, slot: string) => {\n        const cloneBefore = element.cloneNode(true) as HTMLElement;\n        cloneBefore.setAttribute('slot', `fake-${slot}`);\n        this.appendChild(cloneBefore);\n      };\n      this.itemElements.forEach((element) => {\n        cloneAppend(element, 'before');\n        let i = 0;\n        while (i++ < this.fakeLength) {\n          cloneAppend(element, 'after');\n        }\n      });\n    }\n\n    if (this.draggable) {\n      this.addEventListener('mousedown', this.onEventStartBound);\n      window.addEventListener('mouseup', this.onEventEndBound);\n      window.addEventListener('mousemove', this.onEventDoingBound);\n      this.addEventListener('touchstart', this.onEventStartBound);\n      window.addEventListener('touchend', this.onEventEndBound);\n      window.addEventListener('touchmove', this.onEventDoingBound);\n    }\n    if (this.auto && this.itemLength > 1) {\n      const step = this.rolling ? 1 : undefined;\n      this.onAuto(step);\n      if (this.pause) {\n        this.onmouseenter = () => {\n          if (this.eventStatus === 'done') {\n            this.holderFlag = true;\n            clearTimeout(this.sto);\n          }\n        };\n        this.onmouseleave = () => {\n          if (this.eventStatus === 'done') {\n            this.holderFlag = false;\n            this.onAuto();\n          }\n        };\n        this.ontouchstart = () => {\n          if (this.eventStatus === 'done') {\n            this.holderFlag = true;\n            clearTimeout(this.sto);\n          }\n        };\n        this.ontouchend = () => {\n          if (this.eventStatus === 'done') {\n            this.holderFlag = false;\n            this.onAuto();\n          }\n        };\n      }\n    }\n    if (this.flexWidth) {\n      this.onResize();\n      window.addEventListener('resize', this.onResizeBound);\n    }\n  }\n\n  async firstUpdated() {\n    if (!this.shouldLazyUpdate) {\n      return;\n    }\n\n    if (!this.infinite) {\n      return;\n    }\n\n    this.itemElements = await getChildren(this.children);\n    this.itemLength = this.itemElements.length;\n\n    this.itemElements.forEach((element) => {\n      const cloneBefore = element.cloneNode(true) as HTMLElement;\n      this.clonedItemsBefore.push(cloneBefore);\n\n      for (let i = 0; i < this.fakeLength; i++) {\n        const cloneAfter = element.cloneNode(true) as HTMLElement;\n        this.clonedItemsAfter.push(cloneAfter);\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    if (this.draggable && this.itemLength > 1) {\n      this.removeEventListener('mousedown', this.onEventStartBound);\n      window.removeEventListener('mouseup', this.onEventEndBound);\n      window.removeEventListener('mousemove', this.onEventDoingBound);\n      this.removeEventListener('touchstart', this.onEventStartBound);\n      window.removeEventListener('touchend', this.onEventEndBound);\n      window.removeEventListener('touchmove', this.onEventDoingBound);\n    }\n    if (this.flexWidth) window.removeEventListener('resize', this.onResizeBound);\n  }\n\n  onResize() {\n    this.visibleLength = this.clientWidth / this.flexWidth;\n  }\n\n  async onAuto(step: number = 0): Promise<void> {\n    if (!this.auto) return;\n    let duration = this.duration;\n    clearTimeout(this.sto);\n    if (this.index + step < this.itemLength) {\n      if (this.eventStatus !== 'done') this.eventStatus = 'done';\n      this.index += step;\n      step = 1;\n    } else {\n      this.index = 0;\n      duration = 0;\n      step = 0;\n      if (this.infinite) {\n        this.eventStatus = 'fake';\n        this.dragDistance = -this.clientWidth / this.visibleLength;\n        this.userIndex = this.itemLength - 1;\n      }\n    }\n\n    this.sto = setTimeout(() => this.onAuto(step), duration);\n  }\n\n  onIndicateClick(index: number) {\n    this.onAuto(index);\n    this.index = index;\n  }\n\n  onItemClick(event: MouseEvent) {\n    if (!this.clickable) return;\n    if (!this.moveable) return;\n    const { target } = event;\n    if (target instanceof HTMLElement)\n      this.index = this.itemElements.findIndex((x: ChildNode) => target.isEqualNode(x));\n  }\n\n  getClientPoint(event: MouseEvent | TouchEvent) {\n    let clientX = 0;\n    let clientY = 0;\n    if (event instanceof MouseEvent) {\n      clientX = event.clientX;\n      clientY = event.clientY;\n    } else {\n      clientX = event.touches[0].clientX;\n      clientY = event.touches[0].clientY;\n    }\n    return { clientX, clientY };\n  }\n\n  onEventStart(event: MouseEvent | TouchEvent) {\n    if (this.eventStatus === 'done') {\n      this.holderFlag = false;\n      this.eventStatus = 'start';\n      clearTimeout(this.sto);\n      const { clientX, clientY } = this.getClientPoint(event);\n\n      this.startPointer = {\n        clientX,\n        clientY\n      };\n    }\n  }\n\n  onEventEnd() {\n    if (this.eventStatus === 'doing') {\n      this.index = this.userIndex;\n      this.dragDistance = 0;\n    }\n    this.eventStatus = 'done';\n    this.onAuto();\n  }\n\n  closeIndex(position: number) {\n    const { length } = this.itemElements;\n    const diff = this.positions.map((x) => this.diff(x, position));\n    const closePosition = Math.min(...diff);\n    let index = diff.findIndex((x) => closePosition === x);\n    const margin = this.infinite ? length : 0;\n    const max = margin + length - 1; // 안전장치. 기본 인덱스 이상으로 안보이기\n    const min = margin; // 기본 인덱스 이하로 안보이기\n    if (index > max) index = max;\n    else if (index < min) index = min;\n    return index;\n  }\n\n  diff(a: number, b: number) {\n    return a > b ? a - b : b - a;\n  }\n\n  onEventDoing(event: MouseEvent | TouchEvent) {\n    if (['start', 'doing'].includes(this.eventStatus)) {\n      const { clientX, clientY } = this.getClientPoint(event);\n      const starterClientX = this.startPointer.clientX;\n      const starterClientY = this.startPointer.clientY;\n      this.dragDistance = starterClientX - clientX;\n      if (this.eventStatus === 'start')\n        if (this.diff(starterClientX, clientX) > 10 || this.diff(starterClientY, clientY) > 10)\n          this.eventStatus = 'doing'; // 드레그가 시작됐다고 판단하는 움직임 +- 10\n    }\n  }\n\n  render() {\n    return html`\n      <div\n        class=${'hb-carousel__wrap' +\n        (this.eventStatus === 'doing' ? ' hb-carousel__wrap--drag' : '')}\n        style=\"transform: translateX(${this.itemPosition});--duration: ${this\n          .transitionDuration}ms;--type: ${this.rolling ? 'linear' : 'ease'};\"\n      >\n        ${this.infiniteSlotBeforeTemplate}\n        <slot\n          class=\"hb-carousel__items\"\n          @click=\"${this.onItemClick}\"\n          style=\"width: ${this.totalWidth}%;\"\n        ></slot>\n        ${this.infiniteSlotAfterTemplate}\n      </div>\n      ${this.indicateTemplate}\n    `;\n  }\n\n  get indicateTemplate() {\n    if (this.indicate && this.itemLength > 1)\n      return html`<div class=\"hb-carousel__indicate\" part=\"indicate\">\n        ${Array(this.itemLength)\n          .fill(null)\n          .map(\n            (_, i) =>\n              html`<button\n                @click=${() => this.onIndicateClick(i)}\n                part=\"indicate-btn${i === this.index ? ' accent' : ''}\"\n                class=\"hb-carousel__indicate__btn${i === this.index\n                  ? ' hb-carousel__indicate__btn--accent'\n                  : ''}\"\n                title=\"View Item ${i + 1}\"\n              ></button>`\n          )}\n      </div>`;\n  }\n\n  get infiniteSlotBeforeTemplate() {\n    if (this.infinite)\n      return html`<slot\n        class=\"hb-carousel__items hb-carousel__items--fake-before\"\n        name=\"fake-before\"\n        style=\"width: ${this.totalWidth}%; margin-left: ${-this.totalWidth}%;\"\n      >\n        ${this.clonedItemsBefore.map((item) => html`${item}`)}\n      </slot>`;\n  }\n\n  get infiniteSlotAfterTemplate() {\n    if (this.infinite)\n      return html`<slot\n        class=\"hb-carousel__items hb-carousel__items--fake-after\"\n        name=\"fake-after\"\n        style=\"width: ${this.totalWidth * this.fakeLength}%;\"\n      >\n        ${this.clonedItemsAfter.map((item) => html`${item}`)}\n      </slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-carousel': HbCarousel;\n  }\n}\n","import '../';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires close 닫기\n * @property open 온 오프\n * @property width\n * @property persistent\n * @property hideCloseBtn\n * @property image\n * @property textLongClose 3일간 보지않기 버튼 텍스트 편집\n * @property textClose 닫기 버튼 텍스트 편집\n */\n\n@customElement('hb-event-dialog')\nexport class HbEventDialog extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  width = '400px';\n\n  loadingWidth = 400;\n\n  loadingHeight = 490;\n\n  open: boolean;\n\n  persistent = true;\n\n  hideCloseBtn = true;\n\n  image = '';\n\n  href = '';\n\n  textLongClose = '3일간 보지않기';\n\n  textClose = '닫기';\n\n  loaded = false;\n\n  cookieKey = 'main-popup';\n\n  static get properties() {\n    return {\n      open: { type: Boolean, Reflect: true },\n      persistent: { type: Boolean, Reflect: true },\n      hideCloseBtn: { type: Boolean, Reflect: true },\n      width: { type: String, Reflect: true },\n      loadingWidth: { type: Number, Reflect: true },\n      loadingHeight: { type: Number, Reflect: true },\n      loaded: { type: Boolean, Reflect: true },\n      image: { type: String, Reflect: true },\n      textLongClose: { type: String, Reflect: true },\n      textClose: { type: String, Reflect: true },\n      cookieKey: { type: String, Reflect: true },\n      href: { type: String, Reflect: true }\n    };\n  }\n\n  get isOpen() {\n    const open = document.cookie.indexOf(`${this.cookieKey}=`);\n    return this.open && open === -1;\n  }\n\n  render() {\n    return html`\n      <hb-modal\n        @close=${this.onClose}\n        width=${this.width}\n        ?open=${this.isOpen}\n        ?persistent=${this.persistent}\n        transitionType=\"zoom\"\n      >\n        <div class=\"hb-event-dialog__container\">\n          ${this.hideCloseBtn\n            ? ''\n            : html` <button\n                @click=${this.onClose}\n                type=\"button\"\n                class=\"hb-event-dialog__close-btn\"\n                part=\"close-btn\"\n                id=\"close-btn\"\n              >\n                <hb-icon icon=\"system/outline/close\" size=\"small\"></hb-icon>\n              </button>`}\n          <hb-anchor class=\"hb-event-dialog__container__anchor\" href=${this.href}>\n            <hb-img\n              class=\"hb-event-dialog__container__img\"\n              src=${this.image}\n              @load=${() => (this.loaded = true)}\n              @error=${() => (this.loaded = true)}\n              loadingWidth=${this.loadingWidth}\n              loadingHeight=${this.loadingHeight}\n            ></hb-img>\n          </hb-anchor>\n          ${this.loaded\n            ? html`<div class=\"hb-event-dialog__footer\">\n                <button @click=${this.adapterClose} class=\"hb-event-dialog__btn\">\n                  ${this.textLongClose}\n                </button>\n                <button @click=${this.onClose} class=\"hb-event-dialog__btn\">\n                  ${this.textClose}\n                </button>\n              </div>`\n            : ''}\n        </div>\n      </hb-modal>\n    `;\n  }\n\n  adapterClose() {\n    document.cookie = `${this.cookieKey} = true; max-age=259200`;\n    this.onClose();\n  }\n\n  onClose() {\n    this.open = false;\n    this.removeAttribute('open');\n    this.onEvent(new CustomEvent('event'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-event-dialog': HbEventDialog;\n  }\n}\n","import '../';\nimport { HbTransitionType } from '@/components/atom/transition/type';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires close 닫기\n * @property open 온 오프\n * @property width\n * @property persistent\n * @property hideCloseBtn\n * @property icon\n * @property title\n * @slot 내용\n * @csspart container\n * @csspart icon\n * @csspart title\n * @csspart content\n * @csspart buttons\n * @csspart anchor\n */\n\n@customElement('hb-page-dialog')\nexport class HbPageDialog extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  loading = false;\n\n  baseLoadingDuration = 500;\n\n  width = '100%';\n\n  open: boolean;\n\n  icon = '';\n\n  title = '';\n\n  persistent = false;\n\n  hideCloseBtn = false;\n\n  transitionType: HbTransitionType = 'zoom';\n\n  disabled: boolean;\n\n  get eventDisabled() {\n    return this.loading;\n  }\n  // get open() {\n  //   return this._open;\n  // }\n  // set open(val: boolean) {\n  //   if (this._open !== val) {\n  //     this._open = val\n  //     this.onToggle(val)\n  //   }\n  // }\n\n  // @property()\n  // value!: string;\n\n  static get properties() {\n    return {\n      open: { type: Boolean, Reflect: true },\n      buttons: { type: Array, Reflect: true },\n      disabled: { type: Boolean, Reflect: true },\n      eventDisabled: { type: Boolean, Reflect: true },\n      persistent: { type: Boolean, Reflect: true },\n      hideCloseBtn: { type: Boolean, Reflect: true },\n      width: { type: String, Reflect: true },\n      loading: { type: Boolean, Reflect: true },\n      baseLoadingDuration: { type: Number, Reflect: true },\n      buttonAlign: { type: String, Reflect: true },\n      title: { type: String, Reflect: true },\n      icon: { type: String, Reflect: true },\n      transitionType: { type: String, Reflect: true }\n    };\n  }\n\n  render() {\n    return html`\n      <hb-modal\n        @close=${this.onClose}\n        width=${this.width}\n        ?open=${this.open}\n        ?persistent=${this.persistent || this.eventDisabled}\n        transitionType=${this.transitionType}\n      >\n        <div class=\"hb-page-dialog__container ${this.transitionType}\" part=\"container\">\n          ${this.hideCloseBtn\n            ? ''\n            : html` <hb-button\n                ?disabled=${this.eventDisabled}\n                @event=${this.onClose}\n                class=\"hb-page-dialog__close-btn\"\n                part=\"close-btn\"\n                id=\"close-btn\"\n                color=\"#1F2123\"\n                ><hb-icon icon=\"system/outline/close\" size=\"small\"></hb-icon\n              ></hb-button>`}\n          <div class=\"hb-page-dialog__body\">\n            <slot class=\"hb-page-dialog__body__content\"></slot>\n          </div>\n        </div>\n      </hb-modal>\n    `;\n  }\n\n  onClose() {\n    this.open = false;\n    this.removeAttribute('open');\n    // this.dispatchEvent(new CustomEvent('close'));\n    this.onEvent(new CustomEvent('event'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-page-dialog': HbPageDialog;\n  }\n}\n","import '../';\nimport { Base } from '@/components/base';\nimport {\n  componentVariables,\n  HbTransitionType,\n  type HbDialogAnchor,\n  type HbDialogButton\n} from '@/index';\nimport { wait } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires close 닫기\n * @property open 온 오프\n * @property width\n * @property persistent\n * @property hideCloseBtn\n * @property icon\n * @property title\n * @slot 내용\n * @csspart container\n * @csspart icon\n * @csspart title\n * @csspart content\n * @csspart buttons\n * @csspart anchor\n */\n@customElement('hb-sheet-dialog')\nexport class HbSheetDialog extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  loading = false;\n\n  baseLoadingDuration = 500;\n\n  width = componentVariables.modal.width.sheet + 'px';\n\n  open: boolean;\n\n  title = '';\n\n  persistent = false;\n\n  hideCloseBtn = false;\n\n  buttonAlign = 'horizon';\n\n  anchor: HbDialogAnchor;\n\n  buttons: HbDialogButton[] = [];\n\n  transitionType: HbTransitionType = 'bottom-up';\n\n  disabled: boolean;\n\n  get eventDisabled() {\n    if (this.buttons && this.buttons?.length)\n      return this.buttons.map((x) => x.loading).some((x) => x);\n    return this.loading;\n  }\n  // get open() {\n  //   return this._open;\n  // }\n  // set open(val: boolean) {\n  //   if (this._open !== val) {\n  //     this._open = val\n  //     this.onToggle(val)\n  //   }\n  // }\n\n  // @property()\n  // value!: string;\n  static get properties() {\n    return {\n      open: { type: Boolean, Reflect: true },\n      buttons: { type: Array, Reflect: true },\n      eventDisabled: { type: Boolean, Reflect: true },\n      anchor: { type: Object, Reflect: true },\n      disabled: { type: Boolean, Reflect: true },\n      persistent: { type: Boolean, Reflect: true },\n      hideCloseBtn: { type: Boolean, Reflect: true },\n      width: { type: String, Reflect: true },\n      loading: { type: Boolean, Reflect: true },\n      baseLoadingDuration: { type: Number, Reflect: true },\n      buttonAlign: { type: String, Reflect: true },\n      title: { type: String, Reflect: true },\n      transitionType: { type: String, Reflect: true }\n    };\n  }\n\n  render() {\n    return html`\n      <hb-modal\n        @close=${this.onClose}\n        verticalAlign=\"bottom\"\n        width=${this.width}\n        ?open=${this.open}\n        ?persistent=${this.persistent || this.eventDisabled}\n        transitionType=${this.transitionType}\n      >\n        <div class=\"hb-sheet-dialog__container ${this.transitionType}\">\n          ${this.hideCloseBtn\n            ? ''\n            : html` <hb-button\n                ?disabled=${this.eventDisabled}\n                @event=${this.onClose}\n                class=\"hb-sheet-dialog__close-btn\"\n                part=\"close-btn\"\n                id=\"close-btn\"\n                ><hb-icon icon=\"system/outline/close\" size=\"small\"></hb-icon\n              ></hb-button>`}\n          <div class=\"hb-sheet-dialog__head${!this.title ? ' empty' : ''}\">\n            ${this.title\n              ? html`<p part=\"title\" class=\"hb-sheet-dialog__head__title\">${this.title}</p>`\n              : ''}\n          </div>\n          <div class=\"hb-sheet-dialog__body\">\n            <slot class=\"hb-sheet-dialog__body__content\"></slot>\n          </div>\n          <div class=\"hb-sheet-dialog__foot\">\n            <div class=\"hb-sheet-dialog__foot__button-wrap ${this.buttonAlign}\">\n              ${this.buttons?.map(\n                (x, i) =>\n                  html`<hb-button\n                    ?loading=${this.loading || x.loading}\n                    ?disabled=${this.eventDisabled || x.disabled || this.disabled}\n                    type=\"rectangle\"\n                    @event=${this.adapterEvent.bind(this, x, i)}\n                    theme=${x.theme}\n                    size=\"medium\"\n                    >${x.name}</hb-button\n                  >`\n              )}\n            </div>\n            ${this.anchor && this.anchor.name\n              ? html`<hb-anchor\n                  ?disabled=${this.eventDisabled || this.disabled}\n                  class=\"hb-sheet-dialog__foot__anc\"\n                  href=${this.anchor.href}\n                  target=${this.anchor.target}\n                  @event=${this.anchor.event}\n                  >${this.anchor.name}</hb-anchor\n                >`\n              : ''}\n          </div>\n        </div>\n      </hb-modal>\n    `;\n  }\n\n  async adapterEvent(button: HbDialogButton, index: number) {\n    const { event } = button;\n    if (this.baseLoadingDuration) {\n      const on = this.buttons.slice();\n      const off = this.buttons.slice();\n      on[index].loading = true;\n      this.buttons = on;\n      await Promise.all([event(), wait(this.baseLoadingDuration)]);\n      off[index].loading = false;\n      this.buttons = off;\n    } else event();\n  }\n\n  onClose() {\n    this.open = false;\n    this.removeAttribute('open');\n    this.onEvent(new CustomEvent('event'));\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-sheet-dialog': HbSheetDialog;\n  }\n}\n","import '@/components/atom/icon';\nimport { HbListOption } from '@/components/atom/list/type';\nimport { Base } from '@/components/base';\nimport { getElement } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @fires event 값이 변경될때 발생\n * @property value 기본 값\n * @property options Options[] 옵션\n */\n\n@customElement('hb-select')\nexport class HbSelect extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  selectEl?: HTMLSelectElement;\n\n  disabled: boolean;\n\n  _value?: string;\n\n  options: HbListOption[] = [];\n\n  placeholder = '선택해주세요.';\n\n  emptyText = '데이터가 없습니다.';\n\n  static get properties() {\n    return {\n      _value: { type: String, Reflect: true },\n      value: { type: String, Reflect: true },\n      disabled: { type: Boolean, Reflect: true },\n      options: { type: Array, Reflect: true },\n      placeholder: { type: String, Reflect: true },\n      emptyText: { type: String, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    const selectEl = await getElement<HTMLSelectElement>(this.shadowRoot, 'select');\n    this.tabIndex = 0;\n    this.selectEl = selectEl;\n    this.onclick = () => selectEl.focus();\n    this.addEventListener('focus', () => {\n      this.setAttribute('data-focus', '');\n      this.selectEl.focus();\n    });\n    this.addEventListener('blur', () => this.removeAttribute('data-focus'));\n  }\n\n  get list() {\n    const placeholder: HbListOption[] = [\n      { value: undefined, label: this.placeholder, disabled: true }\n    ];\n    return this.options?.length\n      ? placeholder.concat(this.options)\n      : [{ value: null, label: this.emptyText, disabled: true }];\n  }\n\n  set value(value: string) {\n    if (this._value !== value) {\n      this.focus();\n      this._value = value;\n      this.blur();\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  render() {\n    return html`\n      <select\n        id=\"select\"\n        class=${'hb-select__el' + (this._value ? '' : ' hb-select__el--init')}\n        @change=${this.onSelect}\n        ?disabled=${this.disabled}\n      >\n        ${this.list.map(\n          (x, i) =>\n            html`\n              <option\n                ?selected=${this._value ? this._value === x.value : i === 0}\n                value=${x.value}\n                ?disabled=${x.disabled}\n              >\n                ${x.label}\n              </option>\n            `\n        )}\n      </select>\n      <span class=\"hb-select__icon-wrap\">\n        <hb-icon\n          class=\"hb-select__icon-wrap__el\"\n          icon=\"system/outline/arrow-dropdown\"\n          size=\"small\"\n        ></hb-icon>\n      </span>\n    `;\n  }\n\n  onSelect(ev: Event) {\n    ev.stopImmediatePropagation();\n    const { target } = ev;\n    if (!(target instanceof HTMLSelectElement)) return;\n    const { value } = target;\n    this.value = value!;\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  attributeChangedCallback(name: string, oldVal: string, newVal: string) {\n    if (name === 'value' && oldVal !== newVal) this.onSelect(new Event('change'));\n\n    super.attributeChangedCallback(name, oldVal, newVal);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-select': HbSelect;\n  }\n}\n","import '@/components/atom/loading';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { Base } from '@/components/base';\nimport { HbSkeletonType } from './type';\n\n@customElement('hb-skeleton')\nexport class HbSkeleton extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  type: HbSkeletonType;\n\n  duration: number;\n\n  background: string;\n\n  backgroundAccent: string;\n\n  static get properties() {\n    return {\n      duration: { type: Number, Reflect: true },\n      background: { type: String, Reflect: true },\n      backgroundAccent: { type: String, Reflect: true },\n      type: { type: String, Reflect: true }\n    };\n  }\n\n  get skeletonLength() {\n    if (['card', 'drop-menu-top'].includes(this.type)) return 3;\n    if (['drop-menu-bottom'].includes(this.type)) return 2;\n    return 1;\n  }\n\n  // render() {\n  //   return Array(this.length).fill(null).map((_,i) => html`\n  //     <div class=\"hb-skeleton__wall\" part=${`cell-${i+1}`}></div>\n  //   `)\n\n  // }\n\n  render() {\n    return Array(this.skeletonLength)\n      .fill(null)\n      .map(\n        () =>\n          html`<hb-loading\n            duration=${this.duration}\n            background=${this.background}\n            backgroundAccent=${this.backgroundAccent}\n          ></hb-loading> `\n      );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-skeleton': HbSkeleton;\n  }\n}\n","import { basicVariables } from '@/components/atom/variable/type';\nimport { Base } from '@/components/base';\nimport { getChildren } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n/**\n * @property value\n * @slot content 기본 컨텐츠 영역\n * @slot header 버튼 영역\n * @csspart header\n * @csspart content\n */\n\n@customElement('hb-tab')\nexport class HbTab extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  btns: HTMLElement[] = [];\n\n  contents: HTMLElement[] = [];\n\n  _value = '';\n\n  left = 0;\n\n  width = 0;\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value: string) {\n    this._value = value;\n    this.setIndicator();\n  }\n\n  static get properties() {\n    return {\n      left: { type: Number, Reflect: true },\n      width: { type: Number, Reflect: true },\n      value: { type: String, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    const wrap = await getChildren(this.children);\n    this.btns = wrap.filter((x) => x.slot === 'header');\n    this.contents = wrap.filter((x) => x.slot !== 'header');\n    this.setIndicator();\n  }\n\n  onClick(ev: Event) {\n    const target = ev.target as HTMLElement;\n    const value = this.btns.indexOf(target);\n    this.value = value.toString();\n    this.onEvent(new CustomEvent('event'));\n  }\n\n  async setIndicator() {\n    if (!this.btns.length) return;\n    const number = +this._value;\n    const target = this.btns[number];\n    const { offsetWidth, offsetLeft } = await target;\n    this.left = offsetLeft - this.offsetLeft + basicVariables.layout.gutter;\n    this.width = offsetWidth - basicVariables.layout.gutter * 2;\n    this.btns.concat(this.contents).map((x) => x.removeAttribute('active'));\n    this.btns[number].setAttribute('active', '');\n    this.contents[number]?.setAttribute('active', '');\n  }\n\n  render() {\n    return html`\n      <div class=\"hb-tab__header\" id=\"header\" part=\"header\">\n        <slot\n          class=\"hb-tab__header__btns\"\n          id=\"btns\"\n          part=\"btns\"\n          @click=${this.onClick}\n          name=\"header\"\n        ></slot>\n        <i\n          class=\"hb-tab__header__indicator\"\n          style=\"width: ${this.width}px; transform: translateX(${this.left}px)\"\n        ></i>\n      </div>\n      <slot class=\"hb-tab__content\" id=\"content\" part=\"content\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-tab': HbTab;\n  }\n}\n","import '@/components/molecule/button';\nimport { Base } from '@/components/base';\nimport { componentVariables, HbIconName } from '@/index';\nimport { getElement } from '@/utils';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { HbToastMessage, hbToastTheme, HbToastTheme } from './type';\n\n/**\n * @property open 온 오프\n * @slot header - optional, 헤더\n * @slot content - optional, 내용\n * @slot footer - optional, 푸터\n * @csspart container\n * @csspart header\n * @csspart content\n * @csspart footer\n */\ninterface Timer {\n  time: number;\n  index: number;\n}\n@customElement('hb-toast')\nexport class HbToast extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  now: number = 0;\n\n  messages?: HbToastMessage[];\n\n  timer: Timer[] = [];\n\n  duration: number = 3000;\n\n  hide = false;\n\n  static get properties() {\n    return {\n      messages: { type: Array, Reflect: true },\n      duration: { type: Number, Reflect: true },\n      now: { type: Number, Reflect: true },\n      hide: { type: Boolean, Reflect: true },\n      timer: { type: Array, Reflect: true }\n    };\n  }\n\n  get messagesTrigger() {\n    if (!this.messages?.length) {\n      this.timer = [];\n      return [];\n    }\n    while (this.messages.length > this.timer.length) {\n      const index = this.timer.length;\n      const duration = (this.messages[index].duration || this.duration) - 1;\n      const date = new Date().getTime() + duration;\n      this.timer.push({ time: date, index });\n      setTimeout(() => (this.now = date), duration);\n      // this.getHeight(index);\n    }\n    return this.messages;\n  }\n\n  async getHeight(index: number) {\n    if (index === this.messages.length - 1) {\n      const element = await getElement(this.shadowRoot, `toast-${index}`);\n      const height = element.scrollHeight;\n\n      [element].map((x) =>\n        x.style.setProperty('--transition__height--bottom-up-height', `${height}px`)\n      );\n\n      // element.setAttribute(\n      //   'style',\n      //   `--transition__height--bottom-up-height: ${height}px`,\n      // );\n    }\n  }\n\n  // clean() {\n  //   this.timer = [];\n  //   this.messages = [];\n  // }\n\n  getShow(index: number) {\n    return this.timer[index]?.time > this.now;\n  }\n\n  // getIndex(index: number) {\n  //   return this.timer.filter((x) => x.time > this.now).findIndex(x => x.index === index)\n  // }\n\n  // visibleIcon(msg: string) {\n  //   return msg.match(/\\[!]/)\n  // }\n\n  // messageConverter(msg: string) {\n  //   msg = msg.replace(/\\\\n/g, '\\n')\n  //   return msg.replace(/\\[!]/g, '')\n  // }\n  getIconTemplate(theme?: HbToastTheme) {\n    if (hbToastTheme.includes(theme)) {\n      const icon = componentVariables.toast[theme].icon as HbIconName;\n      const color = componentVariables.toast[theme].color;\n      return html`<hb-icon\n        class=\"hb-toast__content__icon\"\n        style=\"--husc__icon__color: ${color};\"\n        icon=\"${icon}\"\n        size=\"medium\"\n      ></hb-icon>`;\n    }\n  }\n\n  // connectedCallback() {\n  //   super.connectedCallback();\n  //   this.style.setProperty('--transition__delay-start--ms', '30ms');\n  // }\n\n  render() {\n    return this.messagesTrigger.map(\n      (x, i) =>\n        html`<hb-transition\n          id=\"toast-${i}\"\n          class=\"hb-toast__position\"\n          type=\"fade\"\n          ?show=${this.getShow(i)}\n          ><hb-transition type=\"bottom-up\" ?show=${this.getShow(i)}\n            ><div class=\"hb-toast__content\">\n              ${this.getIconTemplate(x.theme)}\n              <div class=\"hb-toast__content__text\">${x.text}</div>\n            </div></hb-transition\n          ></hb-transition\n        >`\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-toast': HbToast;\n  }\n}\n// const NAME = \"hb-toast\";\n// customElements.get(NAME) ||\n//   customElements.define(\n//     NAME,\n//     class extends CustomElement {\n//       template = require(`./${NAME}.hbs`);\n//       css = require(`./${NAME}.scss`).default;\n//       properties = {\n//         id: {\n//           closeBtn: \"close-btn\",\n//           wrap: \"wrap\",\n//         },\n//       };\n//       constructor() {\n//         super();\n//       }\n//       connectedCallback(): void {\n//         super.connectedCallback();\n//         this.isWrapEl.onanimationstart = () => this.onAnimationStart();\n//         this.isWrapEl.onanimationend = () => this.onAnimationEnd();\n//         this.isCloseBtnEl.onclick = () => this.onHide();\n//       }\n//       get isCloseBtnEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.closeBtn\n//         ) as HTMLButtonElement;\n//       }\n//       get isWrapEl() {\n//         return this.shadowRoot.getElementById(\n//           this.isProperties.id.wrap\n//         ) as HTMLButtonElement;\n//       }\n\n//       onHide() {\n//         this.classList.add(this.isProperties.classList.animation);\n//         super.onHide();\n//       }\n//     }\n//   );\n","import '@/components/atom/icon';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\n/**\n * @slot front, 오프너\n * @csspart front\n * @csspart content\n */\n\n@customElement('hb-tooltip')\nexport class HbTooltip extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  open: boolean = false;\n\n  static get properties() {\n    return {\n      open: { type: Boolean, Reflect: true },\n      width: { type: Number, Reflect: true },\n      height: { type: Number, Reflect: true },\n      position: { type: Array, Reflect: true }\n    };\n  }\n\n  async connectedCallback() {\n    await super.connectedCallback();\n    this.tabindex = '0';\n    this.onmouseleave = () => this.hasAttribute('open') && this.removeAttribute('open');\n    this.onblur = () => this.hasAttribute('open') && this.removeAttribute('open');\n  }\n\n  disconnectedCallback() {\n    this.onmouseleave = () => null;\n    this.onblur = () => null;\n  }\n\n  render() {\n    return html`\n      <slot name=\"front\" part=\"front\" class=\"hb-tooltip__front\"></slot>\n      <slot part=\"content\" class=\"hb-tooltip__content\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-tooltip': HbTooltip;\n  }\n}\n","import '@/components/atom/icon';\nimport '@/components/atom/responsive';\nimport '@/components/molecule/anchor';\nimport { Base } from '@/components/base';\nimport { html } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport type { HbFooterChildren, HbFooterMenu, HbFooterSocialMenu } from './type';\n/**\n * @fires change 값이 변경될때 발생\n * @property attributeSync true 시 value값이 arrtibute 싱크됨\n * @property fixed true 시 overflow에서 넘어감\n * @property value 기본 값\n * @property options Options[] 옵션\n * @property search 서치 온오프\n * @slot icon - optional, icon부분을 커스텀할때 사용\n * @slot caret - optional, caret부분을 커스텀할때 사용\n * @slot option - required, select의 옵션 엘리먼트\n * @csspart label\n * @csspart list\n */\n\n@customElement('hb-footer')\nexport class HbFooter extends Base {\n  static get styles() {\n    return [require('./style.scss').default];\n  }\n\n  menu: HbFooterMenu[] = [\n    {\n      name: '이용약관',\n      children: [\n        {\n          name: '서비스 이용약관',\n          target: '_blank',\n          href: 'https://r.heybit.io/c/policy-ko/'\n        },\n        {\n          name: '개인정보 처리방침',\n          target: '_blank',\n          href: 'https://r.heybit.io/c/privacy-ko/',\n          accent: true\n        }\n      ]\n    },\n    {\n      name: '고객지원',\n      children: [\n        { name: '서비스 문의', target: '_blank', href: 'mailto:help@heybit.io' },\n        { name: '사업제휴', target: '_blank', href: 'mailto:business@heybit.io' }\n      ]\n    },\n    {\n      name: '팀',\n      children: [\n        {\n          name: '채용',\n          target: '_blank',\n          href: 'https://uprise.career.greetinghr.com/'\n        }\n      ]\n    },\n    {\n      name: '관련 사이트',\n      children: [{ name: 'Heybit Global', target: '_blank', href: 'https://www.heybit.com/en' }]\n    }\n  ];\n\n  socialMenu: HbFooterSocialMenu[] = [\n    {\n      icon: 'system/filled/logo-facebook',\n      target: '_blank',\n      href: 'https://r.heybit.io/c/facebook/'\n    },\n    {\n      icon: 'system/filled/logo-naver',\n      target: '_blank',\n      href: 'https://m.post.naver.com/my.nhn?memberNo=40921089'\n    },\n    {\n      icon: 'system/filled/logo-twitter',\n      target: '_blank',\n      href: 'https://twitter.com/heybit_io/'\n    },\n    {\n      icon: 'system/filled/logo-instagram',\n      target: '_blank',\n      href: 'https://www.instagram.com/heybit_io/'\n    }\n  ];\n\n  upriseInfo = [\n    '사업자등록번호: 596-87-01059',\n    '대표이사 이충엽',\n    '서울특별시 강남구 삼성로 570 석천빌딩, 9층',\n    '통신판매업신고: 제2022-서울강남-04072호'\n  ];\n\n  company = '업라이즈(주)';\n\n  copy = `© ${new Date().getFullYear()} Uprise, Inc. all rights reserved.`;\n\n  tel = '대표전화 1577-9069';\n\n  static get properties() {\n    return {\n      menu: { type: Array, Reflect: true },\n      socialMenu: { type: Array, Reflect: true },\n      upriseInfo: { type: Array, Reflect: true },\n      copy: { type: String, Reflect: true },\n      tel: { type: String, Reflect: true }\n    };\n  }\n\n  get footer() {\n    return html`\n      <div class=\"hb-footer__routes\">\n        <nav class=\"hb-footer__menu\">${this.menuTemplate}</nav>\n        <div class=\"hb-footer__social\">${this.socialMenuTemplate}</div>\n      </div>\n      <article class=\"hb-footer__text\">\n        <h1 class=\"hb-footer__title\">${this.company}</h1>\n        <address class=\"hb-footer__address\">${this.upriseInfoTemplate}</address>\n        <p class=\"hb-footer__copy\">${this.copy}</p>\n      </article>\n    `;\n  }\n\n  get menuTemplate() {\n    return html`<ul class=\"info-list\">\n      ${this.menu?.map(\n        ({ name, children }) =>\n          html`<li class=\"info-list__item\">\n            <strong class=\"info-list__title\">${name}</strong>\n            ${this.childrenTemplate(children)}\n          </li>`\n      )}\n    </ul>`;\n  }\n\n  childrenTemplate(children: HbFooterChildren[]) {\n    return html`<ul class=\"info-list info-list--children\">\n      ${children.map(\n        (child) => html`<li class=\"info-list__item info-list__item--children\">\n          <hb-anchor\n            class=${child.accent ? 'hb-footer__accent' : ''}\n            href=${child.href}\n            target=${child.target}\n            @event=${child.event}\n          >\n            ${child.name}\n          </hb-anchor>\n        </li>`\n      )}\n    </ul>`;\n  }\n\n  get socialMenuTemplate() {\n    return html`\n      ${this.socialMenu?.map(\n        (x) =>\n          html`<hb-anchor href=${x.href} target=${x.target} @event=${x.event}\n            ><hb-icon size=\"medium\" icon=${x.icon}></hb-icon\n          ></hb-anchor>`\n      )}\n    `;\n  }\n\n  get upriseInfoTemplate() {\n    return html`\n      ${[...this.upriseInfo, this.tel].map(\n        (info) => html`<span class=\"hb-footer__info\">${info}</span>`\n      )}\n    `;\n  }\n\n  render() {\n    return html`\n      <div class=\"hb-footer\">\n        <hb-responsive>\n          <footer slot=\"mobile\" part=\"mobile\" class=\"hb-footer--mobile\">${this.footer}</footer>\n\n          <footer slot=\"desktop\" part=\"desktop\" class=\"hb-footer--desktop\">${this.footer}</footer>\n        </hb-responsive>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'hb-footer': HbFooter;\n  }\n}\n"],"names":[],"sourceRoot":""}