@mixin host-styled($selector: "*") {
  @if ($selector == "*") {
    @at-root :host {
      @content;
    }
    @content;
  } @else {
    @at-root :host(#{$selector}) {
      @content;
    }
    &#{$selector} {
      @content;
    }
  }
}
@mixin child-styled($selector) {
  :host(#{$selector}) &,
  #{$selector} & {
    @content;
  }
}
@mixin slot-styled($selector) {
  &::slotted(#{$selector}) {
    @content;
  }
  > #{$selector} {
    @content;
  }
}
@keyframes hb-styled {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@function toHSL($color, $level: "") {
  $lightness: $level + "%";
  @if $level == "" {
    $lightness: lightness($color);
  }
  @return hue($color), saturation($color), #{$lightness};
}

@function getInteractiveColor($color, $amount) {
  @if (lightness($color) < 50) {
    @return lighten($color, $amount);
  } @else {
    @return darken($color, $amount);
  }
}
@function getHoverColor($color) {
  @return getInteractiveColor($color, 5);
}
@function getActiveColor($color) {
  @return getInteractiveColor($color, 10);
}
// @mixin initial($selector) {
//   #{$selector} {
//     font-family: $font-family;
//     &:not([data-hb-styled]) {
//       visibility: hidden;
//     }
//   }
//   $class: "." + #{$selector};
//   #{$class} {
//     font-family: $font-family;
//   }
// }
@mixin initial($selectors) {
  @each $selector in $selectors {
    #{$selector} {
      font-family: $font-family;
      visibility: hidden;
      &[data-hb-styled] {
        animation: hb-styled $transition__duration;
        visibility: visible;
      }
    }
    $class: "." + #{$selector};
    #{$class} {
      font-family: $font-family;
    }
  }
}
