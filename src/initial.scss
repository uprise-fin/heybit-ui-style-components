@import url("~/node_modules/pretendard/dist/web/static/pretendard.css");
@import "./styles/utils/mixins";
@import "./styles/utils/variables";

@include initial((hb-input, hb-button, hb-dialog, hb-icon, hb-select));
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}
:root {
  @each $group, $variable in $variables {
    @each $key, $value in $variable {
      --#{$group}__#{$key}: #{$value};
    }
  }
}
:root {
  @function getAmount($name, $level) {
    @if ($name == "primary") {
      $level: $level * 3;
      @return 51 + $level;
    }
    @if ($name == "secondary") {
      $level: $level * 3.6;
      @return 19 + $level;
    }
    @if ($name == "tertiary") {
      $level: $level * 1.5;
      @return 92 + $level;
    }
    @if ($name == "quaternary") {
      $level: $level * 1.5;
      @return 94 + $level;
    }
    @if ($name == "quinary") {
      $level: $level * 1.5;
      @return 95 + $level;
    }
    @if ($name == "senary") {
      $level: $level * 1.5;
      @return 95 + $level;
    }
  }
  @each $name, $color in $colors {
    --color__#{$name}: hsl(#{toHSL($color)});
    @for $lv from 0 through $level {
      $vl: $lv - round($level / 2);
      @if $vl != 0 {
        $_lv: getAmount($name, $vl);
        $c: toHSL($color, $_lv);
        --color__#{$name}--#{$vl}: hsl(#{$c});
      }
    }
  }
}
// [data-hb-component] {
//   &:not([data-hb-styled]) {
//     visibility: hidden;
//   }
// }
