@import '@/styles/utils/mixins';

$hb-button__size: (
  xlarge: (
    font-size: 18px,
    height: 70px,
    font-weight: 500,
    border-radius: calc(var(--husc__border__radius) * 2)
  ),
  large: (
    font-size: 16px,
    height: 60px,
    font-weight: 500,
    border-radius: calc(var(--husc__border__radius) * 2)
  ),
  medium: (
    font-size: 15px,
    height: 50px,
    font-weight: 500,
    border-radius: calc(var(--husc__border__radius) * 2)
  ),
  small: (
    font-size: 13px,
    height: 40px,
    font-weight: 500,
    border-radius: var(--husc__border__radius)
  ),
  xsmall: (
    font-size: 13px,
    height: 30px,
    font-weight: 500,
    border-radius: var(--husc__border__radius)
  ),
  // xsmall: (
  //   font-size: 14px,
  //   height: 30px,
  //   border-radius: var(--husc__box__border-radius),
  // ),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
);
$hb-button__type: (
  rectangle: (
    flex: flex
  ),
  radius: (
    border-radius: 1000px
  ),
  circle: (
    border-radius: 100%,
    padding: 0
  )
);
$hb-button__theme: (
  primary: (
    bg: var(--hb__heybit),
    color: var(--husc__font__color__void),
    active: var(--hb__heybit--500),
    hover: var(--hb__heybit--300),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  secondary: (
    bg: var(--hb__secondary),
    color: var(--husc__font__color__void),
    active: var(--hb__black--900),
    hover: var(--hb__black--700),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  success: (
    bg: var(--hb__success),
    color: var(--husc__font__color__void),
    active: var(--hb__green--600),
    hover: var(--hb__green--400),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  error: (
    bg: var(--hb__error),
    color: var(--husc__font__color__void),
    active: var(--hb__red--600),
    hover: var(--hb__red--400),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  warning: (
    bg: var(--hb__warning),
    color: var(--husc__font__color__void),
    active: var(--hb__yellow--600),
    hover: var(--hb__yellow--400),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  info: (
    bg: var(--hb__info),
    color: var(--husc__font__color__void),
    active: var(--hb__blue--600),
    hover: var(--hb__blue--400),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  tertiary: (
    bg: var(--husc__black--100),
    color: var(--husc__font__color__solid),
    active: var(--husc__black--200),
    hover: var(--husc__black--50),
    disabledBg: var(--husc__black--100),
    disabledColor: var(--husc__black--400)
  ),
  quaternary: (
    bd: #dee0e3,
    color: var(--husc__font__color__solid),
    active: var(--husc__black--100),
    // hover: var(--husc__black--50),
    // disabledBg: var(--husc__black--100),
    disabledBd: var(--husc__black--300),
    disabledColor: var(--husc__black--400)
  ),
  harvest: (
    bg: var(--hb__harvest),
    color: var(--husc__font__color__void),
    active: var(--hb__harvest--500),
    hover: var(--hb__harvest--300),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  ),
  defi: (
    bg: var(--hb__defi),
    color: var(--husc__font__color__void),
    active: var(--hb__defi--500),
    hover: var(--hb__defi--300),
    disabledBg: var(--hb__black--100),
    disabledColor: var(--hb__black--400)
  )
);
.hb-button {
  @include disabled();
  @include loading();
  @include host-styled {
    display: inline-flex;
    justify-content: center;
    font-size: var(--husc__button__font-size);
    font-family: var(--husc__font__family);
    box-sizing: border-box;
    cursor: pointer;
    opacity: 1;
    // &::before,
    // &::after {
    //   flex: auto;
    //   content: "";
    // }
  }
  @each $class, $value in $hb-button__theme {
    $bd: map-get($value, bd);
    $bg: map-get($value, bg);
    @include host-styled("[theme='#{$class}']") {
      @if ($bd) {
        border: 1px solid $bd;
      } @else {
        border: 1px solid transparent;
      }
      $color: map-get($value, color);
      --husc__spinner__color: #{$color};
      --husc__icon__color: #{$color};
      color: $color;
      transition: background var(--husc__transition__duration--ms),
        color var(--husc__transition__duration--ms), opacity var(--husc__transition__duration--ms);
      background: $bg;
    }
    // @include host-styled("[type='custom'][theme='#{$class}']") {
    //   $customColor: $bg;
    //   color: var(--husc__white);
    //   color: $customColor;
    //   --husc__spinner__color: #{$customColor};
    //   border: none !important;
    //   background: none !important;
    // }
    @include host-styled("[plain][theme='#{$class}']") {
      --husc__icon__color: #{$bg};
      --husc__spinner__color: #{$bg};
      color: $bg;
      background: transparent;
    }
    @include host-styled(":not([data-disabled])[plain][theme='#{$class}']") {
      border: 1px solid $bg;
    }
    @include host-styled(
      ":not([data-disabled]):not([data-loading])[plain][theme='#{$class}']:hover"
    ) {
      background: map-get($value, bg);
      color: map-get($value, color);
    }
    @include host-styled("[theme='#{$class}'][data-disabled]:not([data-loading])") {
      $disabledColor: map-get($value, disabledColor);
      color: $disabledColor;
      --husc__icon__color: #{$disabledColor};
      border-color: map-get($value, disabledBd);
      background: map-get($value, disabledBg);
    }
    @include host-styled(":not([data-disabled]):not([data-loading])[theme='#{$class}']:hover") {
      background: map-get($value, hover);
    }
    @include host-styled(":not([data-disabled]):not([data-loading])[theme='#{$class}']:active") {
      background: map-get($value, active);
    }
  }
  @each $class, $size in $hb-button__size {
    @include host-styled("[size='#{$class}']") {
      height: map-get($size, height);
      font-size: map-get($size, font-size);
      font-weight: map-get($size, font-weight);
      border-radius: map-get($size, border-radius);
    }
    @include host-styled("[size='#{$class}'][type='circle']") {
      width: map-get($size, height);
      height: map-get($size, height);
    }
  }
  @each $class, $type in $hb-button__type {
    @include host-styled("[type='#{$class}']") {
      display: map-get($type, flex);
      padding: map-get($type, padding);
      border-radius: map-get($type, border-radius);
    }
  }
  @include host-styled(':not([type])') {
    height: auto;
    border-radius: none;
  }
  // @include host-styled("[type='inline']") {
  //   padding: 0 var(--husc__button__padding__right) 0 var(--husc__button__padding__left);
  // }
  // @include host-styled("[type='inline']") {
  //   display: inline-flex;
  // }
  // @include host-styled("[type='custom']") {
  // }

  // @include host-styled(":empty") {
  //   .hb-button__label::before {
  //     content: attr(placeholder);
  //     opacity: 0.5;
  //   }
  // }

  &__slot {
    // position: absolute;
    display: flex;
    align-self: center;
    // &--left {
    //   left: 0;
    // }
    // &--right {
    //   right: 0;
    // }
  }
  &__loading {
    width: inherit;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  &__label {
    display: flex;
    align-items: center;
    gap: 0 4px;
    margin: auto;
  }

  &__container {
    all: unset;
    display: flex;
    justify-content: center;
    width: 100%;

    &:disabled,
    &[disabled] {
      pointer-events: none;
    }

    &:focus-visible {
      outline: 1px dotted var(--hb__secondary);
    }

    &:focus:not(:focus-visible) {
      outline: none;
    }
  }
}

:host([type='rectangle']),
:host([type='radius']) {
  .hb-button__container {
    padding: 0 16px;
  }
}
